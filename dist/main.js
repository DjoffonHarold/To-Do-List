(()=>{"use strict";var e={208:(e,n,t)=>{t.d(n,{A:()=>m});var o=t(354),r=t.n(o),a=t(314),d=t.n(a),s=t(417),c=t.n(s),i=new URL(t(465),t.b),l=new URL(t(593),t.b),A=d()(r()),u=c()(i),p=c()(l);A.push([e.id,`@font-face {\n  font-family: 'exoregular';\n  src: url(${u}) format('woff2'),\n       url(${p}) format('woff');\n  font-weight: normal;\n  font-style: normal;\n\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n  }\n  * {\n    margin: 0;\n  }\n  body {\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n    font-family: 'exoregular';\n  }\n  img, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n  }\n  input, button, textarea, select {\n    font: inherit;\n  }\n  p, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n  }\n /***********************/ \n\n  .container{\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n    font-size: 20px;\n    \n  }\n  .footer{\n    grid-column: 1/4;\n    background-color: #22c55e;\n    text-align: center;\n    \n  }\n  .main-section{\n    grid-column: 1/4;\n    background-color: #22c55e;\n    text-align: center;\n  }\n  .siderigthbar{\n    padding-left: 25px;\n    padding-top: 25px;\n    grid-column: 2/4;\n    background-color: #f0fdf4;\n  }\n  .buttonSide{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n  }\n  .buttonSideLeftBar{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n    margin-top: 25px;\n  }\n  .buttonAddTask-side,\n  .buttonAddTask{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n  }\n  .sideleftbar{\n    padding-top: 25px;\n    padding-left: 25px;\n    background-color: #e5e5e5;\n    position: relative;\n    transition: width 0.6ms ease;\n  \n  }\n\n  .form{\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 15px;\n  }\n  .input-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #bbf7d0;\n  }\n  input:invalid{\n    color: red;\n  }\n  input:valid{\n    color: #16a34a;\n  }\n  .close-form-side,\n  .close-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #ef4444\n  }\n  .seclect-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #bbf7d0;\n  }\n  .tasks-list {\n    list-style-type: none;\n    padding: 0;\n    \n  }\n  .task-item {\n    border: 1px solid #fca5a5;\n    margin: 5px 0;\n    padding: 10px;\n    border-radius: 5px;\n  }\n  dialog[open] {\n  display: block;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-100%, -50%);\n  background-color: white;\n  padding: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  border: none;\n  border-radius: 10px;\n  }\n  dialog {\n  display: none;\n  }\n  .taskItem{\n    gap: 15px;\n    display: flex;\n    margin-bottom: 5px;\n  }\n  .switchButton{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .deleteProjectButton,\n  .deleteButton{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .delete-task-button{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .edit-task-button{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .projectItem:hover{\n    background-color: #7dd3fc;     \n  }\n  .editProject{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .deleteProject{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .item:hover{\n    background-color: #7dd3fc;\n    max-width: 300px;\n   \n  }\n  .Edit{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n \n\n.sidebar-content {\n    /*display: none;\n    flex-direction: column;*/\n}\n\n.sideleftbar.open .sidebar-content {\n    display: flex;\n}\n.sideleftbar.closed .sidebar-content{\n  display: none;\n  flex-direction: column;\n}\n\n.toggle-sidebar {\n    background-color: #3498db;\n    color: white;\n    border: none;\n    padding: 10px;\n    cursor: pointer;\n   /* width: 100%;*/\n}\n\n.toggle-sidebar:hover {\n    background-color: #2980b9;\n}\n.sideleftbar.open {\n  width: 600px;\n}\n\n.sideleftbar.closed {\n  width: 0px;\n  \n}\n\n \n  \n\n\n\n\n\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB;6DACmD;EACnD,mBAAmB;EACnB,kBAAkB;;AAEpB;;AAEA;IACI,sBAAsB;EACxB;EACA;IACE,SAAS;EACX;EACA;IACE,gBAAgB;IAChB,mCAAmC;IACnC,yBAAyB;EAC3B;EACA;IACE,cAAc;IACd,eAAe;EACjB;EACA;IACE,aAAa;EACf;EACA;IACE,yBAAyB;EAC3B;CACD,wBAAwB;;EAEvB;IACE,aAAa;IACb,oCAAoC;IACpC,eAAe;;EAEjB;EACA;IACE,gBAAgB;IAChB,yBAAyB;IACzB,kBAAkB;;EAEpB;EACA;IACE,gBAAgB;IAChB,yBAAyB;IACzB,kBAAkB;EACpB;EACA;IACE,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,yBAAyB;EAC3B;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;EAC3B;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;EAClB;EACA;;IAEE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;EAC3B;EACA;IACE,iBAAiB;IACjB,kBAAkB;IAClB,yBAAyB;IACzB,kBAAkB;IAClB,4BAA4B;;EAE9B;;EAEA;IACE,aAAa;IACb,qCAAqC;IACrC,SAAS;EACX;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;EAC3B;EACA;IACE,UAAU;EACZ;EACA;IACE,cAAc;EAChB;EACA;;IAEE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;EAC3B;EACA;IACE,qBAAqB;IACrB,UAAU;;EAEZ;EACA;IACE,yBAAyB;IACzB,aAAa;IACb,aAAa;IACb,kBAAkB;EACpB;EACA;EACA,cAAc;EACd,eAAe;EACf,QAAQ;EACR,SAAS;EACT,iCAAiC;EACjC,uBAAuB;EACvB,aAAa;EACb,yCAAyC;EACzC,YAAY;EACZ,mBAAmB;EACnB;EACA;EACA,aAAa;EACb;EACA;IACE,SAAS;IACT,aAAa;IACb,kBAAkB;EACpB;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;;IAEE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,yBAAyB;EAC3B;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,yBAAyB;IACzB,gBAAgB;;EAElB;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;;;AAGF;IACI;4BACwB;AAC5B;;AAEA;IACI,aAAa;AACjB;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,eAAe;GAChB,gBAAgB;AACnB;;AAEA;IACI,yBAAyB;AAC7B;AACA;EACE,YAAY;AACd;;AAEA;EACE,UAAU;;AAEZ",sourcesContent:["@font-face {\n  font-family: 'exoregular';\n  src: url('exo-regular-webfont.woff2') format('woff2'),\n       url('exo-regular-webfont.woff') format('woff');\n  font-weight: normal;\n  font-style: normal;\n\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n  }\n  * {\n    margin: 0;\n  }\n  body {\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n    font-family: 'exoregular';\n  }\n  img, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n  }\n  input, button, textarea, select {\n    font: inherit;\n  }\n  p, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n  }\n /***********************/ \n\n  .container{\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n    font-size: 20px;\n    \n  }\n  .footer{\n    grid-column: 1/4;\n    background-color: #22c55e;\n    text-align: center;\n    \n  }\n  .main-section{\n    grid-column: 1/4;\n    background-color: #22c55e;\n    text-align: center;\n  }\n  .siderigthbar{\n    padding-left: 25px;\n    padding-top: 25px;\n    grid-column: 2/4;\n    background-color: #f0fdf4;\n  }\n  .buttonSide{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n  }\n  .buttonSideLeftBar{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n    margin-top: 25px;\n  }\n  .buttonAddTask-side,\n  .buttonAddTask{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n  }\n  .sideleftbar{\n    padding-top: 25px;\n    padding-left: 25px;\n    background-color: #e5e5e5;\n    position: relative;\n    transition: width 0.6ms ease;\n  \n  }\n\n  .form{\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 15px;\n  }\n  .input-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #bbf7d0;\n  }\n  input:invalid{\n    color: red;\n  }\n  input:valid{\n    color: #16a34a;\n  }\n  .close-form-side,\n  .close-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #ef4444\n  }\n  .seclect-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #bbf7d0;\n  }\n  .tasks-list {\n    list-style-type: none;\n    padding: 0;\n    \n  }\n  .task-item {\n    border: 1px solid #fca5a5;\n    margin: 5px 0;\n    padding: 10px;\n    border-radius: 5px;\n  }\n  dialog[open] {\n  display: block;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-100%, -50%);\n  background-color: white;\n  padding: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  border: none;\n  border-radius: 10px;\n  }\n  dialog {\n  display: none;\n  }\n  .taskItem{\n    gap: 15px;\n    display: flex;\n    margin-bottom: 5px;\n  }\n  .switchButton{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .deleteProjectButton,\n  .deleteButton{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .delete-task-button{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .edit-task-button{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .projectItem:hover{\n    background-color: #7dd3fc;     \n  }\n  .editProject{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .deleteProject{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .item:hover{\n    background-color: #7dd3fc;\n    max-width: 300px;\n   \n  }\n  .Edit{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n \n\n.sidebar-content {\n    /*display: none;\n    flex-direction: column;*/\n}\n\n.sideleftbar.open .sidebar-content {\n    display: flex;\n}\n.sideleftbar.closed .sidebar-content{\n  display: none;\n  flex-direction: column;\n}\n\n.toggle-sidebar {\n    background-color: #3498db;\n    color: white;\n    border: none;\n    padding: 10px;\n    cursor: pointer;\n   /* width: 100%;*/\n}\n\n.toggle-sidebar:hover {\n    background-color: #2980b9;\n}\n.sideleftbar.open {\n  width: 600px;\n}\n\n.sideleftbar.closed {\n  width: 0px;\n  \n}\n\n \n  \n\n\n\n\n\n"],sourceRoot:""}]);const m=A},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var d={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(d[c]=!0)}for(var i=0;i<e.length;i++){var l=[].concat(e[i]);o&&d[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},417:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},d=[],s=0;s<e.length;s++){var c=e[s],i=o.base?c[0]+o.base:c[0],l=a[i]||0,A="".concat(i," ").concat(l);a[i]=l+1;var u=t(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=r(p,o);o.byIndex=s,n.splice(s,0,{identifier:A,updater:m,references:1})}d.push(A)}return d}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var d=0;d<a.length;d++){var s=t(a[d]);n[s].references--}for(var c=o(e,r),i=0;i<a.length;i++){var l=t(a[i]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},659:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},593:(e,n,t)=>{e.exports=t.p+"7af4002f083ef6cdccce.woff"},465:(e,n,t)=>{e.exports=t.p+"d2c0ba9e697626c66ab1.woff2"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(72),n=t.n(e),o=t(825),r=t.n(o),a=t(659),d=t.n(a),s=t(56),c=t.n(s),i=t(540),l=t.n(i),A=t(113),u=t.n(A),p=t(208),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=d().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),n()(p.A,m),p.A&&p.A.locals&&p.A.locals;class g{constructor(e){this.name=e,this.tasks=[]}addTask(e){this.tasks.push(e)}deleteTask(e){this.tasks=this.tasks.filter((n=>n.id!==e))}editTask(e,n,t,o,r,a){const d=this.tasks.find((n=>n.id===e));d&&(d.title=n,d.description=t,d.dueDate=o,d.priority=r,d.completed=a)}}class b{constructor(e,n,t,o,r,a=!1){this.id=e,this.title=n,this.description=t,this.dueDate=o,this.priority=r,this.completed=a}}class B{constructor(){this.projects=[],this.loadProjects(),this.taskIdCounter=1,this.selectedProject=null,this.renderProjects(),0===this.projects.length?this.createDefaultProject():this.selectedProject=this.projects[0].name,this.renderProjects(),this.selectedProject&&this.renderTasks(this.selectedProject)}createDefaultProject(){const e=this.createProject("Default Project");this.addTaskToProject(e.name,"Default Task","This is a default task","2024-06-25","medium"),this.selectedProject=e.name,this.saveProjects()}createProject(e){const n=new g(e);return this.projects.push(n),this.saveProjects(),this.renderProjects(),n}addTaskToProject(e,n,t,o,r){const a=this.getProjectByName(e);if(a){const d=new b(this.taskIdCounter++,n,t,o,r);a.addTask(d),this.renderTasks(e),this.saveProjects()}}getProjectByName(e){return this.projects.find((n=>n.name===e))}saveProjects(){const e={projects:this.projects,taskIdCounter:this.taskIdCounter};localStorage.setItem("taskManager",JSON.stringify(e))}loadProjects(){const e=localStorage.getItem("taskManager");if(e){const n=JSON.parse(e);this.projects=n.projects.map((e=>{const n=new g(e.name);return n.tasks=e.tasks.map((e=>new b(e.id,e.title,e.description,e.dueDate,e.priority,e.completed))),n})),this.taskIdCounter=n.taskIdCounter}else this.createDefaultProject()}renderProjects(){const e=document.getElementById("projects-list");e.innerHTML=" ",this.projects.forEach((n=>{const t=document.createElement("div");t.className="project-item",t.innerHTML=`\n                <span class="project-name">${n.name}</span>\n                <button class="edit-project-button">🖊️</button>\n                <button class="delete-project-button">🗑️</button>\n            `,t.querySelector(".project-name").style.cursor="pointer",t.querySelector(".project-name").classList.add("projectItem"),t.querySelector(".edit-project-button").classList.add("editProject"),t.querySelector(".delete-project-button").classList.add("deleteProject"),t.querySelector(".project-name").addEventListener("click",(()=>this.selectProject(n.name))),t.querySelector(".edit-project-button").addEventListener("click",(()=>this.openEditProjectDialog(n.name))),t.querySelector(".delete-project-button").addEventListener("click",(()=>this.deleteProject(n.name))),e.appendChild(t)}))}renderTasks(e){const n=this.getProjectByName(e),t=document.getElementById("tasks-list");n?(t.innerHTML=` <h3>Tasks for ${n.name}</h3>`,n.tasks.forEach((e=>{const o=document.createElement("div");o.classList.add("item"),o.style.cursor="pointer",o.className="task "+(e.completed?"completed":""),o.innerHTML=`\n           \n                \n                    <input type="checkbox" ${e.completed?"checked":""}>\n                    <h3 class="task-title">Title: ${e.title}</h3>\n                                        \n                    <h4 style = "font-size:20px; color:#0369a1;">Description: ${e.description}</h4>\n                   \n                    <span style = "font-size:20px">Due Date: ${e.dueDate}</span>\n                   \n                    <span style = "font-size:20px; color:#b91c1c">Priority: ${e.priority}</span>\n                    \n                    <button class="edit-task-button">🖊️</button>\n\n                    <button class="delete-task-button">❎</button>\n                   \n            `,t.appendChild(o),o.querySelector(".edit-task-button").addEventListener("click",(()=>this.openEditTaskDialog(e.id,n.name))),o.querySelector(".delete-task-button").addEventListener("click",(()=>this.deleteTask(e.id,n.name))),o.querySelector('input[type="checkbox"]').addEventListener("change",(t=>this.toggleTaskCompletion(e.id,n.name,t.target.checked)))}))):console.error(`Project not found: ${e}`)}toggleTaskCompletion(e,n,t){const o=this.getProjectByName(n);if(o){const r=o.tasks.find((n=>n.id===e));r&&(r.completed=t,this.renderTasks(n),this.saveProjects())}}deleteTask(e,n){const t=this.getProjectByName(n);t&&(t.deleteTask(e),this.renderTasks(n),this.saveProjects())}editTask(e,n,t,o,r,a,d){const s=this.getProjectByName(a);s&&(s.editTask(e,n,t,o,r,d),this.renderTasks(a),this.saveProjects())}deleteProject(e){this.projects=this.projects.filter((n=>n.name!==e)),this.saveProjects(),this.renderProjects(),document.getElementById("tasks-list").innerHTML=""}editProject(e,n){const t=this.getProjectByName(e);t&&(t.name=n,this.saveProjects(),this.renderProjects(),this.selectedProject===e&&(this.selectedProject=n,this.renderTasks(n)))}selectProject(e){this.selectedProject=e,this.saveProjects(),this.renderTasks(e),document.getElementById("add-task-button").style.display="block",document.getElementById("add-task-button").addEventListener("click",(()=>function(e){document.getElementById("task-dialog").showModal(),document.getElementById("taskIdInput").value="",document.getElementById("title").value="",document.getElementById("description").value="",document.getElementById("due-date").value="",document.getElementById("priority").value="medium",document.getElementById("project").value=e}(e)))}openEditTaskDialog(e,n){const t=this.getProjectByName(n);if(t){const o=t.tasks.find((n=>n.id===e));o&&(document.getElementById("taskIdInput").value=o.id,document.getElementById("title").value=o.title,document.getElementById("description").value=o.description,document.getElementById("due-date").value=o.dueDate,document.getElementById("priority").value=o.priority,document.getElementById("project").value=n,document.getElementById("task-dialog").showModal())}}openEditProjectDialog(e){document.getElementById("edit-project-dialog").showModal(),document.getElementById("old-project-name").value=e,document.getElementById("new-project-name").value=e}}document.addEventListener("DOMContentLoaded",(()=>{const e=new B;e.renderProjects();const n=document.getElementById("sideleftbar");document.getElementById("sidebar-content"),document.getElementById("toggle-sidebar").addEventListener("click",(()=>{n.classList.toggle("open"),n.classList.toggle("closed")})),document.getElementById("open-dialog-side").addEventListener("click",(function(){document.getElementById("open-dialog-project").showModal()})),document.getElementById("project-form").addEventListener("submit",(n=>{n.preventDefault();const t=document.getElementById("project-name").value.trim();t&&(e.createProject(t),document.getElementById("open-dialog-project").close())})),document.getElementById("task-form").addEventListener("submit",(n=>{n.preventDefault();const t=document.getElementById("taskIdInput").value,o=document.getElementById("title").value,r=document.getElementById("description").value,a=document.getElementById("due-date").value,d=document.getElementById("priority").value,s=document.getElementById("project").value;t?e.editTask(parseInt(t),o,r,a,d,s,!1):e.addTaskToProject(s,o,r,a,d),document.getElementById("task-dialog").close()})),document.getElementById("confirm-edit-project").addEventListener("click",(()=>{const n=document.getElementById("old-project-name").value,t=document.getElementById("new-project-name").value;t&&(e.editProject(n,t),document.getElementById("edit-project-dialog").close())})),document.getElementById("close-dialog").addEventListener("click",(()=>{document.getElementById("task-dialog").close()})),document.getElementById("close-dialog-side").addEventListener("click",(()=>{document.getElementById("open-dialog-project").close()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVN4RSxHQUFTUyxFQUFPQyxFQUFhQyxFQUFTQyxFQUFVZSxHQUZoRSxHQUlwQnVDLEVBQVkxQyxpQkFBaUJHLEVBQWFsQixFQUFPQyxFQUFhQyxFQUFTQyxHQUdyRXBGLFNBQVMrRyxlQUFlLGVBQWVnQyxPQUFPLElBR2xEL0ksU0FBUytHLGVBQWUsd0JBQXdCUSxpQkFBaUIsU0FBUyxLQUN0RSxNQUFNMEIsRUFBaUJqSixTQUFTK0csZUFBZSxvQkFBb0J5QixNQUM3RFUsRUFBaUJsSixTQUFTK0csZUFBZSxvQkFBb0J5QixNQUMvRFUsSUFDQVIsRUFBWVAsWUFBWWMsRUFBZ0JDLEdBQ3hDbEosU0FBUytHLGVBQWUsdUJBQXVCZ0MsUUFDbkQsSUFHSi9JLFNBQVMrRyxlQUFlLGdCQUFnQlEsaUJBQWlCLFNBQVMsS0FDOUR2SCxTQUFTK0csZUFBZSxlQUFlZ0MsT0FBTyxJQUdsRC9JLFNBQVMrRyxlQUFlLHFCQUFxQlEsaUJBQWlCLFNBQVMsS0FDbkV2SCxTQUFTK0csZUFBZSx1QkFBdUJnQyxPQUFPLEdBQ3hELEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90by1kby1saXN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RvLWRvLWxpc3Qvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90by1kby1saXN0Ly4vc3JjL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy90YXNrLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QvLi9zcmMvdGFza01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiZXhvLXJlZ3VsYXItd2ViZm9udC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcImV4by1yZWd1bGFyLXdlYmZvbnQud29mZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYEBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ2V4b3JlZ3VsYXInO1xuICBzcmM6IHVybCgke19fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX199KSBmb3JtYXQoJ3dvZmYyJyksXG4gICAgICAgdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fX30pIGZvcm1hdCgnd29mZicpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG5cbn1cblxuKiwgKjo6YmVmb3JlLCAqOjphZnRlciB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgfVxuICAqIHtcbiAgICBtYXJnaW46IDA7XG4gIH1cbiAgYm9keSB7XG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgICBmb250LWZhbWlseTogJ2V4b3JlZ3VsYXInO1xuICB9XG4gIGltZywgcGljdHVyZSwgdmlkZW8sIGNhbnZhcywgc3ZnIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gIH1cbiAgaW5wdXQsIGJ1dHRvbiwgdGV4dGFyZWEsIHNlbGVjdCB7XG4gICAgZm9udDogaW5oZXJpdDtcbiAgfVxuICBwLCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcbiAgICBvdmVyZmxvdy13cmFwOiBicmVhay13b3JkO1xuICB9XG4gLyoqKioqKioqKioqKioqKioqKioqKioqLyBcblxuICAuY29udGFpbmVye1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywxZnIpO1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgICBcbiAgfVxuICAuZm9vdGVye1xuICAgIGdyaWQtY29sdW1uOiAxLzQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIyYzU1ZTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgXG4gIH1cbiAgLm1haW4tc2VjdGlvbntcbiAgICBncmlkLWNvbHVtbjogMS80O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMmM1NWU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG4gIC5zaWRlcmlndGhiYXJ7XG4gICAgcGFkZGluZy1sZWZ0OiAyNXB4O1xuICAgIHBhZGRpbmctdG9wOiAyNXB4O1xuICAgIGdyaWQtY29sdW1uOiAyLzQ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZmRmNDtcbiAgfVxuICAuYnV0dG9uU2lkZXtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMmM1NWU7XG4gIH1cbiAgLmJ1dHRvblNpZGVMZWZ0QmFye1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIyYzU1ZTtcbiAgICBtYXJnaW4tdG9wOiAyNXB4O1xuICB9XG4gIC5idXR0b25BZGRUYXNrLXNpZGUsXG4gIC5idXR0b25BZGRUYXNre1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIyYzU1ZTtcbiAgfVxuICAuc2lkZWxlZnRiYXJ7XG4gICAgcGFkZGluZy10b3A6IDI1cHg7XG4gICAgcGFkZGluZy1sZWZ0OiAyNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNlNWU1ZTU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRyYW5zaXRpb246IHdpZHRoIDAuNm1zIGVhc2U7XG4gIFxuICB9XG5cbiAgLmZvcm17XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xuICAgIGdhcDogMTVweDtcbiAgfVxuICAuaW5wdXQtZm9ybXtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmY3ZDA7XG4gIH1cbiAgaW5wdXQ6aW52YWxpZHtcbiAgICBjb2xvcjogcmVkO1xuICB9XG4gIGlucHV0OnZhbGlke1xuICAgIGNvbG9yOiAjMTZhMzRhO1xuICB9XG4gIC5jbG9zZS1mb3JtLXNpZGUsXG4gIC5jbG9zZS1mb3Jte1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VmNDQ0NFxuICB9XG4gIC5zZWNsZWN0LWZvcm17XG4gICAgYm9yZGVyOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYmJmN2QwO1xuICB9XG4gIC50YXNrcy1saXN0IHtcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gICAgcGFkZGluZzogMDtcbiAgICBcbiAgfVxuICAudGFzay1pdGVtIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZmNhNWE1O1xuICAgIG1hcmdpbjogNXB4IDA7XG4gICAgcGFkZGluZzogMTBweDtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gIH1cbiAgZGlhbG9nW29wZW5dIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTEwMCUsIC01MCUpO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgcGFkZGluZzogMjBweDtcbiAgYm94LXNoYWRvdzogMCA1cHggMTVweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gIGJvcmRlcjogbm9uZTtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgfVxuICBkaWFsb2cge1xuICBkaXNwbGF5OiBub25lO1xuICB9XG4gIC50YXNrSXRlbXtcbiAgICBnYXA6IDE1cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG4gIH1cbiAgLnN3aXRjaEJ1dHRvbntcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxNmEzNGFcbiAgfVxuICAuZGVsZXRlUHJvamVjdEJ1dHRvbixcbiAgLmRlbGV0ZUJ1dHRvbntcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNkYzI2MjZcbiAgfVxuICAuZGVsZXRlLXRhc2stYnV0dG9ue1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMjYyNlxuICB9XG4gIC5lZGl0LXRhc2stYnV0dG9ue1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE2YTM0YVxuICB9XG4gIC5wcm9qZWN0SXRlbTpob3ZlcntcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2RkM2ZjOyAgICAgXG4gIH1cbiAgLmVkaXRQcm9qZWN0e1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE2YTM0YVxuICB9XG4gIC5kZWxldGVQcm9qZWN0e1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMjYyNlxuICB9XG4gIC5pdGVtOmhvdmVye1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM3ZGQzZmM7XG4gICAgbWF4LXdpZHRoOiAzMDBweDtcbiAgIFxuICB9XG4gIC5FZGl0e1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE2YTM0YVxuICB9XG4gXG5cbi5zaWRlYmFyLWNvbnRlbnQge1xuICAgIC8qZGlzcGxheTogbm9uZTtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyovXG59XG5cbi5zaWRlbGVmdGJhci5vcGVuIC5zaWRlYmFyLWNvbnRlbnQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG4uc2lkZWxlZnRiYXIuY2xvc2VkIC5zaWRlYmFyLWNvbnRlbnR7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi50b2dnbGUtc2lkZWJhciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzM0OThkYjtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgLyogd2lkdGg6IDEwMCU7Ki9cbn1cblxuLnRvZ2dsZS1zaWRlYmFyOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjk4MGI5O1xufVxuLnNpZGVsZWZ0YmFyLm9wZW4ge1xuICB3aWR0aDogNjAwcHg7XG59XG5cbi5zaWRlbGVmdGJhci5jbG9zZWQge1xuICB3aWR0aDogMHB4O1xuICBcbn1cblxuIFxuICBcblxuXG5cblxuXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSx5QkFBeUI7RUFDekI7NkRBQ21EO0VBQ25ELG1CQUFtQjtFQUNuQixrQkFBa0I7O0FBRXBCOztBQUVBO0lBQ0ksc0JBQXNCO0VBQ3hCO0VBQ0E7SUFDRSxTQUFTO0VBQ1g7RUFDQTtJQUNFLGdCQUFnQjtJQUNoQixtQ0FBbUM7SUFDbkMseUJBQXlCO0VBQzNCO0VBQ0E7SUFDRSxjQUFjO0lBQ2QsZUFBZTtFQUNqQjtFQUNBO0lBQ0UsYUFBYTtFQUNmO0VBQ0E7SUFDRSx5QkFBeUI7RUFDM0I7Q0FDRCx3QkFBd0I7O0VBRXZCO0lBQ0UsYUFBYTtJQUNiLG9DQUFvQztJQUNwQyxlQUFlOztFQUVqQjtFQUNBO0lBQ0UsZ0JBQWdCO0lBQ2hCLHlCQUF5QjtJQUN6QixrQkFBa0I7O0VBRXBCO0VBQ0E7SUFDRSxnQkFBZ0I7SUFDaEIseUJBQXlCO0lBQ3pCLGtCQUFrQjtFQUNwQjtFQUNBO0lBQ0Usa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIseUJBQXlCO0VBQzNCO0VBQ0E7SUFDRSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLHlCQUF5QjtFQUMzQjtFQUNBO0lBQ0UsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQix5QkFBeUI7SUFDekIsZ0JBQWdCO0VBQ2xCO0VBQ0E7O0lBRUUsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQix5QkFBeUI7RUFDM0I7RUFDQTtJQUNFLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLGtCQUFrQjtJQUNsQiw0QkFBNEI7O0VBRTlCOztFQUVBO0lBQ0UsYUFBYTtJQUNiLHFDQUFxQztJQUNyQyxTQUFTO0VBQ1g7RUFDQTtJQUNFLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIseUJBQXlCO0VBQzNCO0VBQ0E7SUFDRSxVQUFVO0VBQ1o7RUFDQTtJQUNFLGNBQWM7RUFDaEI7RUFDQTs7SUFFRSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCO0VBQ0Y7RUFDQTtJQUNFLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIseUJBQXlCO0VBQzNCO0VBQ0E7SUFDRSxxQkFBcUI7SUFDckIsVUFBVTs7RUFFWjtFQUNBO0lBQ0UseUJBQXlCO0lBQ3pCLGFBQWE7SUFDYixhQUFhO0lBQ2Isa0JBQWtCO0VBQ3BCO0VBQ0E7RUFDQSxjQUFjO0VBQ2QsZUFBZTtFQUNmLFFBQVE7RUFDUixTQUFTO0VBQ1QsaUNBQWlDO0VBQ2pDLHVCQUF1QjtFQUN2QixhQUFhO0VBQ2IseUNBQXlDO0VBQ3pDLFlBQVk7RUFDWixtQkFBbUI7RUFDbkI7RUFDQTtFQUNBLGFBQWE7RUFDYjtFQUNBO0lBQ0UsU0FBUztJQUNULGFBQWE7SUFDYixrQkFBa0I7RUFDcEI7RUFDQTtJQUNFLFlBQVk7SUFDWixrQkFBa0I7SUFDbEI7RUFDRjtFQUNBOztJQUVFLFlBQVk7SUFDWixrQkFBa0I7SUFDbEI7RUFDRjtFQUNBO0lBQ0UsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQjtFQUNGO0VBQ0E7SUFDRSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCO0VBQ0Y7RUFDQTtJQUNFLHlCQUF5QjtFQUMzQjtFQUNBO0lBQ0UsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQjtFQUNGO0VBQ0E7SUFDRSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCO0VBQ0Y7RUFDQTtJQUNFLHlCQUF5QjtJQUN6QixnQkFBZ0I7O0VBRWxCO0VBQ0E7SUFDRSxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCO0VBQ0Y7OztBQUdGO0lBQ0k7NEJBQ3dCO0FBQzVCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtBQUN4Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osWUFBWTtJQUNaLGFBQWE7SUFDYixlQUFlO0dBQ2hCLGdCQUFnQjtBQUNuQjs7QUFFQTtJQUNJLHlCQUF5QjtBQUM3QjtBQUNBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsVUFBVTs7QUFFWlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnZXhvcmVndWxhcic7XFxuICBzcmM6IHVybCgnZXhvLXJlZ3VsYXItd2ViZm9udC53b2ZmMicpIGZvcm1hdCgnd29mZjInKSxcXG4gICAgICAgdXJsKCdleG8tcmVndWxhci13ZWJmb250LndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuXFxufVxcblxcbiosICo6OmJlZm9yZSwgKjo6YWZ0ZXIge1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgfVxcbiAgKiB7XFxuICAgIG1hcmdpbjogMDtcXG4gIH1cXG4gIGJvZHkge1xcbiAgICBsaW5lLWhlaWdodDogMS41O1xcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gICAgZm9udC1mYW1pbHk6ICdleG9yZWd1bGFyJztcXG4gIH1cXG4gIGltZywgcGljdHVyZSwgdmlkZW8sIGNhbnZhcywgc3ZnIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG4gIGlucHV0LCBidXR0b24sIHRleHRhcmVhLCBzZWxlY3Qge1xcbiAgICBmb250OiBpbmhlcml0O1xcbiAgfVxcbiAgcCwgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XFxuICAgIG92ZXJmbG93LXdyYXA6IGJyZWFrLXdvcmQ7XFxuICB9XFxuIC8qKioqKioqKioqKioqKioqKioqKioqKi8gXFxuXFxuICAuY29udGFpbmVye1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLDFmcik7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgXFxuICB9XFxuICAuZm9vdGVye1xcbiAgICBncmlkLWNvbHVtbjogMS80O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjJjNTVlO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIFxcbiAgfVxcbiAgLm1haW4tc2VjdGlvbntcXG4gICAgZ3JpZC1jb2x1bW46IDEvNDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIyYzU1ZTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgfVxcbiAgLnNpZGVyaWd0aGJhcntcXG4gICAgcGFkZGluZy1sZWZ0OiAyNXB4O1xcbiAgICBwYWRkaW5nLXRvcDogMjVweDtcXG4gICAgZ3JpZC1jb2x1bW46IDIvNDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZmRmNDtcXG4gIH1cXG4gIC5idXR0b25TaWRle1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIyYzU1ZTtcXG4gIH1cXG4gIC5idXR0b25TaWRlTGVmdEJhcntcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyMmM1NWU7XFxuICAgIG1hcmdpbi10b3A6IDI1cHg7XFxuICB9XFxuICAuYnV0dG9uQWRkVGFzay1zaWRlLFxcbiAgLmJ1dHRvbkFkZFRhc2t7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjJjNTVlO1xcbiAgfVxcbiAgLnNpZGVsZWZ0YmFye1xcbiAgICBwYWRkaW5nLXRvcDogMjVweDtcXG4gICAgcGFkZGluZy1sZWZ0OiAyNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTVlNWU1O1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIHRyYW5zaXRpb246IHdpZHRoIDAuNm1zIGVhc2U7XFxuICBcXG4gIH1cXG5cXG4gIC5mb3Jte1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xcbiAgICBnYXA6IDE1cHg7XFxuICB9XFxuICAuaW5wdXQtZm9ybXtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmY3ZDA7XFxuICB9XFxuICBpbnB1dDppbnZhbGlke1xcbiAgICBjb2xvcjogcmVkO1xcbiAgfVxcbiAgaW5wdXQ6dmFsaWR7XFxuICAgIGNvbG9yOiAjMTZhMzRhO1xcbiAgfVxcbiAgLmNsb3NlLWZvcm0tc2lkZSxcXG4gIC5jbG9zZS1mb3Jte1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VmNDQ0NFxcbiAgfVxcbiAgLnNlY2xlY3QtZm9ybXtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNiYmY3ZDA7XFxuICB9XFxuICAudGFza3MtbGlzdCB7XFxuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgXFxuICB9XFxuICAudGFzay1pdGVtIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2ZjYTVhNTtcXG4gICAgbWFyZ2luOiA1cHggMDtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgfVxcbiAgZGlhbG9nW29wZW5dIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMTAwJSwgLTUwJSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIHBhZGRpbmc6IDIwcHg7XFxuICBib3gtc2hhZG93OiAwIDVweCAxNXB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICB9XFxuICBkaWFsb2cge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG4gIC50YXNrSXRlbXtcXG4gICAgZ2FwOiAxNXB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XFxuICB9XFxuICAuc3dpdGNoQnV0dG9ue1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE2YTM0YVxcbiAgfVxcbiAgLmRlbGV0ZVByb2plY3RCdXR0b24sXFxuICAuZGVsZXRlQnV0dG9ue1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RjMjYyNlxcbiAgfVxcbiAgLmRlbGV0ZS10YXNrLWJ1dHRvbntcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkYzI2MjZcXG4gIH1cXG4gIC5lZGl0LXRhc2stYnV0dG9ue1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzE2YTM0YVxcbiAgfVxcbiAgLnByb2plY3RJdGVtOmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2RkM2ZjOyAgICAgXFxuICB9XFxuICAuZWRpdFByb2plY3R7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTZhMzRhXFxuICB9XFxuICAuZGVsZXRlUHJvamVjdHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkYzI2MjZcXG4gIH1cXG4gIC5pdGVtOmhvdmVye1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2RkM2ZjO1xcbiAgICBtYXgtd2lkdGg6IDMwMHB4O1xcbiAgIFxcbiAgfVxcbiAgLkVkaXR7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTZhMzRhXFxuICB9XFxuIFxcblxcbi5zaWRlYmFyLWNvbnRlbnQge1xcbiAgICAvKmRpc3BsYXk6IG5vbmU7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Ki9cXG59XFxuXFxuLnNpZGVsZWZ0YmFyLm9wZW4gLnNpZGViYXItY29udGVudCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5zaWRlbGVmdGJhci5jbG9zZWQgLnNpZGViYXItY29udGVudHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4udG9nZ2xlLXNpZGViYXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQ5OGRiO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgIC8qIHdpZHRoOiAxMDAlOyovXFxufVxcblxcbi50b2dnbGUtc2lkZWJhcjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMyOTgwYjk7XFxufVxcbi5zaWRlbGVmdGJhci5vcGVuIHtcXG4gIHdpZHRoOiA2MDBweDtcXG59XFxuXFxuLnNpZGVsZWZ0YmFyLmNsb3NlZCB7XFxuICB3aWR0aDogMHB4O1xcbiAgXFxufVxcblxcbiBcXG4gIFxcblxcblxcblxcblxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0NzkyOiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvamVjdCB7XG4gICAgY29uc3RydWN0b3IobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnRhc2tzID0gW107XG4gICAgICAgXG4gICAgfVxuXG4gICAgYWRkVGFzayh0YXNrKSB7XG4gICAgICAgIHRoaXMudGFza3MucHVzaCh0YXNrKTtcbiAgICB9XG5cbiAgICBkZWxldGVUYXNrKHRhc2tJZCkge1xuICAgICAgICB0aGlzLnRhc2tzID0gdGhpcy50YXNrcy5maWx0ZXIodGFzayA9PiB0YXNrLmlkICE9PSB0YXNrSWQpO1xuICAgIH1cblxuICAgIGVkaXRUYXNrKHRhc2tJZCwgbmV3VGl0bGUsIG5ld0Rlc2NyaXB0aW9uLCBuZXdEdWVEYXRlLCBuZXdQcmlvcml0eSwgY29tcGxldGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2sgPSB0aGlzLnRhc2tzLmZpbmQodGFzayA9PiB0YXNrLmlkID09PSB0YXNrSWQpO1xuICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgdGFzay50aXRsZSA9IG5ld1RpdGxlO1xuICAgICAgICAgICAgdGFzay5kZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgICAgICAgICAgdGFzay5kdWVEYXRlID0gbmV3RHVlRGF0ZTtcbiAgICAgICAgICAgIHRhc2sucHJpb3JpdHkgPSBuZXdQcmlvcml0eTtcbiAgICAgICAgICAgIHRhc2suY29tcGxldGVkID0gY29tcGxldGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgXG59XG5cbi8qY2xhc3MgUHJvamVjdHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKXtcbiAgICAgICAgIHRoaXMubmFtZSA9IG5hbWUgIFxuICAgICAgICAgdGhpcy50YXNrcyA9IFtdXG4gICAgfVxuICAgIGFkZFRhc2sodGFzayl7XG4gICAgICAgIHRoaXMudGFza3MucHVzaCh0YXNrKVxuICAgIH1cbiAgICBkZWxldGVUYXNrKGluZGV4KXtcbiAgICAgICAgdGhpcy50YXNrcyA9IHRoaXMudGFza3MuZmlsdGVyKHRhc2sgPT4gdGFzay5pZCE9PSBpbmRleClcbiAgICB9XG5cbiAgICBlZGl0VGFzayhpbmRleCwgbmV3VGl0bGUsIG5ld0Rlc2NyaXB0aW9uLCBuZXdEdWVEYXRlLCBuZXdQcmlvcml0eSwgY29tcGxldGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2sgPSB0aGlzLnRhc2tzLmZpbmQodGFzayA9PiB0YXNrLmlkID09PSBpbmRleCk7XG4gICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICB0YXNrLnRpdGxlID0gbmV3VGl0bGU7XG4gICAgICAgICAgICB0YXNrLmRlc2NyaXB0aW9uID0gbmV3RGVzY3JpcHRpb247XG4gICAgICAgICAgICB0YXNrLmR1ZURhdGUgPSBuZXdEdWVEYXRlO1xuICAgICAgICAgICAgdGFzay5wcmlvcml0eSA9IG5ld1ByaW9yaXR5O1xuICAgICAgICAgICAgdGFzay5jb21wbGV0ZWQgPSBjb21wbGV0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0VGFza0J5SWQoaW5kZXgpe1xuICAgICAgICByZXR1cm4gdGhpcy50YXNrcyA9IHRoaXMudGFza3MuZmluZCh0YXNrID0+IHRhc2suaWQgPT09IGluZGV4KVxuICAgIH1cbiAgICBcbn1cbmV4cG9ydCBkZWZhdWx0IFByb2plY3QqL1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFzayB7XG4gICAgY29uc3RydWN0b3IoaWQsIHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJpb3JpdHksIGNvbXBsZXRlZCA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSBjb21wbGV0ZWQ7XG4gICAgfVxufVxuXG5cblxuXG5cblxuXG5cbi8qXG5jbGFzcyBUYXNre1xuICAgIGNvbnN0cnVjdG9yKHRpdGxlLCBkZXNjcmlwdGlvbixkdWVEYXRlLCBwcmlvcml0eSwgcHJvamVjdCwgY29tcGxldGVkID0gZmFsc2Upe1xuICAgICAgICBcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdDtcbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSBjb21wbGV0ZWQ7XG4gICAgfVxuXG4gICAgIFxufVxuZXhwb3J0IGRlZmF1bHQgVGFzayovXG4iLCJpbXBvcnQgUHJvamVjdCBmcm9tICcuL3Byb2plY3QnO1xuaW1wb3J0IFRhc2sgZnJvbSAnLi90YXNrJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFza01hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByb2plY3RzID1bXVxuICAgICAgICB0aGlzLmxvYWRQcm9qZWN0cygpO1xuICAgICAgICB0aGlzLnRhc2tJZENvdW50ZXIgPSAxO1xuICAgICAgICB0aGlzLnNlbGVjdGVkUHJvamVjdCA9IG51bGw7XG4gICAgICAgIHRoaXMucmVuZGVyUHJvamVjdHMoKTtcbiAgICAgICAgaWYgKHRoaXMucHJvamVjdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZURlZmF1bHRQcm9qZWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUHJvamVjdCA9IHRoaXMucHJvamVjdHNbMF0ubmFtZTsgLy8gU2VsZWN0IHRoZSBmaXJzdCBwcm9qZWN0IGJ5IGRlZmF1bHRcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlclByb2plY3RzKCk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkUHJvamVjdCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYXNrcyh0aGlzLnNlbGVjdGVkUHJvamVjdCk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIGNyZWF0ZURlZmF1bHRQcm9qZWN0KCkge1xuICAgICAgICBjb25zdCBkZWZhdWx0UHJvamVjdCA9IHRoaXMuY3JlYXRlUHJvamVjdCgnRGVmYXVsdCBQcm9qZWN0Jyk7XG4gICAgICAgIHRoaXMuYWRkVGFza1RvUHJvamVjdChkZWZhdWx0UHJvamVjdC5uYW1lLCAnRGVmYXVsdCBUYXNrJywgJ1RoaXMgaXMgYSBkZWZhdWx0IHRhc2snLCAnMjAyNC0wNi0yNScsICdtZWRpdW0nKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFByb2plY3QgPSBkZWZhdWx0UHJvamVjdC5uYW1lO1xuICAgICAgICB0aGlzLnNhdmVQcm9qZWN0cygpXG4gICAgfVxuXG4gICAgY3JlYXRlUHJvamVjdChuYW1lKSB7XG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdChuYW1lKTtcbiAgICAgICAgdGhpcy5wcm9qZWN0cy5wdXNoKG5ld1Byb2plY3QpO1xuICAgICAgICB0aGlzLnNhdmVQcm9qZWN0cygpXG4gICAgICAgIHRoaXMucmVuZGVyUHJvamVjdHMoKTtcbiAgICAgICAgcmV0dXJuIG5ld1Byb2plY3Q7XG4gICAgfVxuXG4gICAgYWRkVGFza1RvUHJvamVjdChwcm9qZWN0TmFtZSwgdGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSkge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5nZXRQcm9qZWN0QnlOYW1lKHByb2plY3ROYW1lKTtcbiAgICAgICAgaWYgKHByb2plY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2sgPSBuZXcgVGFzayh0aGlzLnRhc2tJZENvdW50ZXIrKywgdGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSk7XG4gICAgICAgICAgICBwcm9qZWN0LmFkZFRhc2sobmV3VGFzayk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRhc2tzKHByb2plY3ROYW1lKTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZVByb2plY3RzKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFByb2plY3RCeU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0cy5maW5kKHByb2plY3QgPT4gcHJvamVjdC5uYW1lID09PSBuYW1lKTtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgc2F2ZVByb2plY3RzKCkge1xuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgcHJvamVjdHM6IHRoaXMucHJvamVjdHMsXG4gICAgICAgICAgICB0YXNrSWRDb3VudGVyOiB0aGlzLnRhc2tJZENvdW50ZXJcbiAgICAgICAgfTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rhc2tNYW5hZ2VyJywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xuICAgIH1cblxuICAgIGxvYWRQcm9qZWN0cygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrTWFuYWdlcicpO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnByb2plY3RzID0gcGFyc2VkRGF0YS5wcm9qZWN0cy5tYXAocHJvamVjdERhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2plY3QgPSBuZXcgUHJvamVjdChwcm9qZWN0RGF0YS5uYW1lKTtcbiAgICAgICAgICAgICAgICBwcm9qZWN0LnRhc2tzID0gcHJvamVjdERhdGEudGFza3MubWFwKHRhc2tEYXRhID0+IG5ldyBUYXNrKHRhc2tEYXRhLmlkLCB0YXNrRGF0YS50aXRsZSwgdGFza0RhdGEuZGVzY3JpcHRpb24sIHRhc2tEYXRhLmR1ZURhdGUsIHRhc2tEYXRhLnByaW9yaXR5LCB0YXNrRGF0YS5jb21wbGV0ZWQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvamVjdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy50YXNrSWRDb3VudGVyID0gcGFyc2VkRGF0YS50YXNrSWRDb3VudGVyO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZURlZmF1bHRQcm9qZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG4gICAvKiBpbml0aWFsaXplRGVmYXVsdFByb2plY3QoKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRQcm9qZWN0ID0gdGhpcy5jcmVhdGVQcm9qZWN0KCdEZWZhdWx0IFByb2plY3QnKTtcbiAgICAgICAgdGhpcy5hZGRUYXNrVG9Qcm9qZWN0KCdEZWZhdWx0IFByb2plY3QnLCAnRGVmYXVsdCBUYXNrJywgJ1RoaXMgaXMgYSBkZWZhdWx0IHRhc2sgZGVzY3JpcHRpb24nLCAnMjAyNC0xMi0zMScsICdtZWRpdW0nKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFByb2plY3QgPSBkZWZhdWx0UHJvamVjdC5uYW1lO1xuICAgICAgICB0aGlzLnJlbmRlclRhc2tzKGRlZmF1bHRQcm9qZWN0Lm5hbWUpO1xuICAgIH0qL1xuICAgIFxuXG4gICAgcmVuZGVyUHJvamVjdHMoKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3RMaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3RzLWxpc3QnKTtcbiAgICAgICBcbiAgICAgICAgcHJvamVjdExpc3QuaW5uZXJIVE1MID0gXCIgXCI7XG4gICAgICAgXG5cbiAgICAgIFxuICAgICAgICB0aGlzLnByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgcHJvamVjdEl0ZW0uY2xhc3NOYW1lID0gJ3Byb2plY3QtaXRlbSc7XG4gICAgICAgICAgICBwcm9qZWN0SXRlbS5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwcm9qZWN0LW5hbWVcIj4ke3Byb2plY3QubmFtZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImVkaXQtcHJvamVjdC1idXR0b25cIj7wn5aK77iPPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImRlbGV0ZS1wcm9qZWN0LWJ1dHRvblwiPvCfl5HvuI88L2J1dHRvbj5cbiAgICAgICAgICAgIGA7XG4gICAgICAgICAgICBwcm9qZWN0SXRlbS5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1uYW1lJykuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgcHJvamVjdEl0ZW0ucXVlcnlTZWxlY3RvcignLnByb2plY3QtbmFtZScpLmNsYXNzTGlzdC5hZGQoJ3Byb2plY3RJdGVtJylcbiAgICAgICAgICAgIHByb2plY3RJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5lZGl0LXByb2plY3QtYnV0dG9uJykuY2xhc3NMaXN0LmFkZCgnZWRpdFByb2plY3QnKVxuICAgICAgICAgICAgcHJvamVjdEl0ZW0ucXVlcnlTZWxlY3RvcignLmRlbGV0ZS1wcm9qZWN0LWJ1dHRvbicpLmNsYXNzTGlzdC5hZGQoJ2RlbGV0ZVByb2plY3QnKVxuICAgICAgICAgICAgcHJvamVjdEl0ZW0ucXVlcnlTZWxlY3RvcignLnByb2plY3QtbmFtZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5zZWxlY3RQcm9qZWN0KHByb2plY3QubmFtZSkpO1xuICAgICAgICAgICAgcHJvamVjdEl0ZW0ucXVlcnlTZWxlY3RvcignLmVkaXQtcHJvamVjdC1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMub3BlbkVkaXRQcm9qZWN0RGlhbG9nKHByb2plY3QubmFtZSkpO1xuICAgICAgICAgICAgcHJvamVjdEl0ZW0ucXVlcnlTZWxlY3RvcignLmRlbGV0ZS1wcm9qZWN0LWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5kZWxldGVQcm9qZWN0KHByb2plY3QubmFtZSkpO1xuICAgICAgICAgICAgcHJvamVjdExpc3QuYXBwZW5kQ2hpbGQocHJvamVjdEl0ZW0pO1xuXG4gICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXJUYXNrcyhwcm9qZWN0TmFtZSkge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5nZXRQcm9qZWN0QnlOYW1lKHByb2plY3ROYW1lKTtcbiAgICAgICAgY29uc3QgdGFza0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza3MtbGlzdCcpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFwcm9qZWN0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBQcm9qZWN0IG5vdCBmb3VuZDogJHtwcm9qZWN0TmFtZX1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhc2tMaXN0LmlubmVySFRNTCA9IGAgPGgzPlRhc2tzIGZvciAke3Byb2plY3QubmFtZX08L2gzPmA7XG5cbiAgICAgICAgcHJvamVjdC50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFza0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHRhc2tJdGVtLmNsYXNzTGlzdC5hZGQoJ2l0ZW0nKVxuICAgICAgICAgICAgdGFza0l0ZW0uc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInXG4gICAgICAgICAgIFxuICAgICAgICAgICAgdGFza0l0ZW0uY2xhc3NOYW1lID0gYHRhc2sgJHt0YXNrLmNvbXBsZXRlZCA/ICdjb21wbGV0ZWQnIDogJyd9YDtcblxuICAgICAgICAgICAgdGFza0l0ZW0uaW5uZXJIVE1MID0gYFxuICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiICR7dGFzay5jb21wbGV0ZWQgPyAnY2hlY2tlZCcgOiAnJ30+XG4gICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhc2stdGl0bGVcIj5UaXRsZTogJHt0YXNrLnRpdGxlfTwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxoNCBzdHlsZSA9IFwiZm9udC1zaXplOjIwcHg7IGNvbG9yOiMwMzY5YTE7XCI+RGVzY3JpcHRpb246ICR7dGFzay5kZXNjcmlwdGlvbn08L2g0PlxuICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZSA9IFwiZm9udC1zaXplOjIwcHhcIj5EdWUgRGF0ZTogJHt0YXNrLmR1ZURhdGV9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZSA9IFwiZm9udC1zaXplOjIwcHg7IGNvbG9yOiNiOTFjMWNcIj5Qcmlvcml0eTogJHt0YXNrLnByaW9yaXR5fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJlZGl0LXRhc2stYnV0dG9uXCI+8J+Wiu+4jzwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJkZWxldGUtdGFzay1idXR0b25cIj7inY48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGA7XG4gICAgICAgICAgICB0YXNrTGlzdC5hcHBlbmRDaGlsZCh0YXNrSXRlbSk7XG5cbiAgICAgICAgICAgIHRhc2tJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5lZGl0LXRhc2stYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLm9wZW5FZGl0VGFza0RpYWxvZyh0YXNrLmlkLCBwcm9qZWN0Lm5hbWUpKTtcbiAgICAgICAgICAgIHRhc2tJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5kZWxldGUtdGFzay1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuZGVsZXRlVGFzayh0YXNrLmlkLCBwcm9qZWN0Lm5hbWUpKTtcbiAgICAgICAgICAgIHRhc2tJdGVtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4gdGhpcy50b2dnbGVUYXNrQ29tcGxldGlvbih0YXNrLmlkLCBwcm9qZWN0Lm5hbWUsIGV2ZW50LnRhcmdldC5jaGVja2VkKSk7XG4gICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICB9XG5cbiAgICB0b2dnbGVUYXNrQ29tcGxldGlvbih0YXNrSWQsIHByb2plY3ROYW1lLCBjb21wbGV0ZWQpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHRoaXMuZ2V0UHJvamVjdEJ5TmFtZShwcm9qZWN0TmFtZSk7XG4gICAgICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrID0gcHJvamVjdC50YXNrcy5maW5kKHRhc2sgPT4gdGFzay5pZCA9PT0gdGFza0lkKTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgdGFzay5jb21wbGV0ZWQgPSBjb21wbGV0ZWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJUYXNrcyhwcm9qZWN0TmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlUHJvamVjdHMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsZXRlVGFzayh0YXNrSWQsIHByb2plY3ROYW1lKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSB0aGlzLmdldFByb2plY3RCeU5hbWUocHJvamVjdE5hbWUpO1xuICAgICAgICBpZiAocHJvamVjdCkge1xuICAgICAgICAgICAgcHJvamVjdC5kZWxldGVUYXNrKHRhc2tJZCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclRhc2tzKHByb2plY3ROYW1lKTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZVByb2plY3RzKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVkaXRUYXNrKHRhc2tJZCwgdGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgcHJvamVjdE5hbWUsIGNvbXBsZXRlZCkge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5nZXRQcm9qZWN0QnlOYW1lKHByb2plY3ROYW1lKTtcbiAgICAgICAgaWYgKHByb2plY3QpIHtcbiAgICAgICAgICAgIHByb2plY3QuZWRpdFRhc2sodGFza0lkLCB0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBjb21wbGV0ZWQpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUYXNrcyhwcm9qZWN0TmFtZSk7XG4gICAgICAgICAgICB0aGlzLnNhdmVQcm9qZWN0cygpXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZGVsZXRlUHJvamVjdChwcm9qZWN0TmFtZSkge1xuICAgICAgICB0aGlzLnByb2plY3RzID0gdGhpcy5wcm9qZWN0cy5maWx0ZXIocHJvamVjdCA9PiBwcm9qZWN0Lm5hbWUgIT09IHByb2plY3ROYW1lKTtcbiAgICAgICAgdGhpcy5zYXZlUHJvamVjdHMoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJQcm9qZWN0cygpO1xuICAgICAgICBjb25zdCB0YXNrTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrcy1saXN0Jyk7XG4gICAgICAgIHRhc2tMaXN0LmlubmVySFRNTCA9ICcnO1xuICAgIH1cblxuICAgIGVkaXRQcm9qZWN0KG9sZE5hbWUsIG5ld05hbWUpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHRoaXMuZ2V0UHJvamVjdEJ5TmFtZShvbGROYW1lKTtcbiAgICAgICAgaWYgKHByb2plY3QpIHtcbiAgICAgICAgICAgIHByb2plY3QubmFtZSA9IG5ld05hbWU7XG4gICAgICAgICAgICB0aGlzLnNhdmVQcm9qZWN0cygpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJQcm9qZWN0cygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRQcm9qZWN0ID09PSBvbGROYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFByb2plY3QgPSBuZXdOYW1lO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyVGFza3MobmV3TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxlY3RQcm9qZWN0KHByb2plY3ROYW1lKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRQcm9qZWN0ID0gcHJvamVjdE5hbWU7XG4gICAgICAgIHRoaXMuc2F2ZVByb2plY3RzKClcbiAgICAgICAgdGhpcy5yZW5kZXJUYXNrcyhwcm9qZWN0TmFtZSk7XG4gICAgICAgIGNvbnN0IGFkZFRhc2tCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkLXRhc2stYnV0dG9uJyk7XG4gICAgICAgIGFkZFRhc2tCdXR0b24uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICAgICAgLy9hZGRUYXNrQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiBvcGVuQWRkVGFza0RpYWxvZyhwcm9qZWN0TmFtZSk7XG5cbiAgICBmdW5jdGlvbiBvcGVuQWRkVGFza0RpYWxvZyhwcm9qZWN0TmFtZSkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1kaWFsb2cnKS5zaG93TW9kYWwoKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tJZElucHV0JykudmFsdWUgPSAnJztcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWUgPSAnJztcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2NyaXB0aW9uJykudmFsdWUgPSAnJztcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R1ZS1kYXRlJykudmFsdWUgPSAnJztcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWUgPSAnbWVkaXVtJztcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3QnKS52YWx1ZSA9IHByb2plY3ROYW1lO1xuICAgIH1cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZC10YXNrLWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gb3BlbkFkZFRhc2tEaWFsb2cocHJvamVjdE5hbWUpKTtcbiAgICB9XG4gICAgXG4gICAgb3BlbkVkaXRUYXNrRGlhbG9nKHRhc2tJZCwgcHJvamVjdE5hbWUpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHRoaXMuZ2V0UHJvamVjdEJ5TmFtZShwcm9qZWN0TmFtZSk7XG4gICAgICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrID0gcHJvamVjdC50YXNrcy5maW5kKHRhc2sgPT4gdGFzay5pZCA9PT0gdGFza0lkKTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tJZElucHV0JykudmFsdWUgPSB0YXNrLmlkO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpLnZhbHVlID0gdGFzay50aXRsZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVzY3JpcHRpb24nKS52YWx1ZSA9IHRhc2suZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2R1ZS1kYXRlJykudmFsdWUgPSB0YXNrLmR1ZURhdGU7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWUgPSB0YXNrLnByaW9yaXR5O1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0JykudmFsdWUgPSBwcm9qZWN0TmFtZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1kaWFsb2cnKS5zaG93TW9kYWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgICBvcGVuRWRpdFByb2plY3REaWFsb2cocHJvamVjdE5hbWUpIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXQtcHJvamVjdC1kaWFsb2cnKS5zaG93TW9kYWwoKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29sZC1wcm9qZWN0LW5hbWUnKS52YWx1ZSA9IHByb2plY3ROYW1lO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3LXByb2plY3QtbmFtZScpLnZhbHVlID0gcHJvamVjdE5hbWU7XG4gICAgfVxufVxuLypcbiBjbGFzcyBUYXNrTWFuYWdlciB7XG4gICAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLnRhc2tzID0gW11cbiAgICAgICAgdGhpcy5wcm9qZWN0cyA9IFtdO1xuICAgICAgfVxuXG4gICAgICBnZXRQcm9qZWN0QnlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QubmFtZSA9PT0gbmFtZSk7XG4gICAgfVxuXG4gICAgZGlzcGxheVRhc2socHJvamVjdE5hbWUpIHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSB0aGlzLmdldFByb2plY3RCeU5hbWUocHJvamVjdE5hbWUpO1xuICAgICAgICBjb25zdCB0YXNrTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrcy1saXN0Jyk7XG4gICAgICAgXG5cbiAgICAgICAgdGFza0xpc3QuaW5uZXJIVE1MID0gYFxuICAgICAgICA8YnV0dG9uIGlkPVwiYWRkLXRhc2stYnV0dG9uXCI+QWRkIFRhc2s8L2J1dHRvbj5gXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGQtdGFzay1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IG9wZW5BZGRUYXNrRGlhbG9nKHByb2plY3QubmFtZSkpO1xuXG4gICAgICAgIHRoaXMudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2tJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICAgIHRhc2tJdGVtLmNsYXNzTmFtZSA9IGB0YXNrICR7dGFzay5jb21wbGV0ZWQgPyAnY29tcGxldGVkJyA6ICcnfWA7XG5cbiAgICAgICAgICAgIHRhc2tJdGVtLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFzay1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiICR7dGFzay5jb21wbGV0ZWQgPyAnY2hlY2tlZCcgOiAnJ30+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGFzay10aXRsZVwiPiR7dGFzay50aXRsZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2stYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFzay1kZXRhaWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5EZXNjcmlwdGlvbjo8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHt0YXNrLmRlc2NyaXB0aW9ufTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrLWRldGFpbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkR1ZSBEYXRlOjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke3Rhc2suZHVlRGF0ZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFzay1kZXRhaWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5Qcmlvcml0eTo8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHt0YXNrLnByaW9yaXR5fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2stYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiZWRpdC10YXNrLWJ1dHRvblwiPkVkaXQ8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImRlbGV0ZS10YXNrLWJ1dHRvblwiPkRlbGV0ZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgYDtcbiAgICAgICAgICAgIHRhc2tMaXN0LmFwcGVuZENoaWxkKHRhc2tJdGVtKTtcblxuICAgICAgICAgICAgdGFza0l0ZW0ucXVlcnlTZWxlY3RvcignLmVkaXQtdGFzay1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IG9wZW5FZGl0VGFza0RpYWxvZyh0YXNrLmlkLCBwcm9qZWN0Lm5hbWUpKTtcbiAgICAgICAgICAgIHRhc2tJdGVtLnF1ZXJ5U2VsZWN0b3IoJy5kZWxldGUtdGFzay1idXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGRlbGV0ZVRhc2sodGFzay5pZCwgcHJvamVjdC5uYW1lKSk7XG4gICAgICAgICAgICB0YXNrSXRlbS5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHRvZ2dsZVRhc2tDb21wbGV0aW9uKHRhc2suaWQsIHByb2plY3QubmFtZSwgZXZlbnQudGFyZ2V0LmNoZWNrZWQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdG9nZ2xlVGFza0NvbXBsZXRpb24oaW5kZXgsIHByb2plY3ROYW1lLCBjb21wbGV0ZWQpIHtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHRoaXMuZ2V0UHJvamVjdEJ5TmFtZShwcm9qZWN0TmFtZSk7XG4gICAgICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICAgICBjb25zdCB0YXNrID0gcHJvamVjdC50YXNrcy5maW5kKHRhc2sgPT4gdGFzay5pZCA9PT0gaW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICB0YXNrLmNvbXBsZXRlZCA9IGNvbXBsZXRlZDtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXlUYXNrKHByb2plY3ROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWxldGVUYXNrKGluZGV4LCBwcm9qZWN0TmFtZSkge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5nZXRQcm9qZWN0QnlOYW1lKHByb2plY3ROYW1lKTtcbiAgICAgICAgaWYgKHByb2plY3QpIHtcbiAgICAgICAgICAgIHByb2plY3QuZGVsZXRlVGFzayhpbmRleCk7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlUYXNrKHByb2plY3ROYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVkaXRUYXNrKGluZGV4LCB0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBwcm9qZWN0TmFtZSwgY29tcGxldGVkKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSB0aGlzLmdldFByb2plY3RCeU5hbWUocHJvamVjdE5hbWUpO1xuICAgICAgICBpZiAocHJvamVjdCkge1xuICAgICAgICAgICAgcHJvamVjdC5lZGl0VGFzayhpbmRleCwgdGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgY29tcGxldGVkKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVRhc2socHJvamVjdE5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0UHJvamVjdChwcm9qZWN0TmFtZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkUHJvamVjdCA9IHByb2plY3ROYW1lO1xuICAgICAgICB0aGlzLmRpc3BsYXlUYXNrKHByb2plY3ROYW1lKTtcbiAgICB9XG4gICAvKiBlZGl0VGFzayhpbmRleCwgbmV3VGl0bGUsIG5ld0Rlc2NyaXB0aW9uLCBuZXdEdWVEYXRlLCBuZXdQcmlvcml0eSl7XG4gICAgICAgIGNvbnN0IHRhc2sgPSB0aGlzLnRhc2tzW2luZGV4XVxuICAgICAgICB0YXNrLnRpdGxlID0gbmV3VGl0bGVcbiAgICAgICAgdGFzay5kZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uXG4gICAgICAgIHRhc2suZHVlRGF0ZSA9IG5ld0R1ZURhdGVcbiAgICAgICAgdGFzay5wcmlvcml0eSA9IG5ld1ByaW9yaXR5XG4gICAgICAgIHRoaXMuc2F2ZVRhc2tzKClcbiAgICAgICAgdGhpcy5kaXNwbGF5VGFzaygpXG4gICAgfVxuXG4gICAgZGVsZXRlVGFzayhpbmRleCl7XG4gICAgICAgIHRoaXMudGFza3Muc3BsaWNlKGluZGV4LDEpICBcbiAgICAgICAgdGhpcy5zYXZlVGFza3MoKVxuICAgICAgICB0aGlzLmRpc3BsYXlUYXNrKCkgICAgICBcbiAgICB9XG5cbiAgICBzd2l0Y2hUYXNrKGluZGV4KXtcbiAgICAgICAgdGhpcy50YXNrc1tpbmRleF0uc3dpdGNoQ29tcGxldGVkKClcbiAgICAgICAgdGhpcy5zYXZlVGFza3MoKVxuICAgICAgICB0aGlzLmRpc3BsYXlUYXNrKCkgXG4gICAgfSovXG4gICAvKiBzYXZlVGFza3MoKXtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rhc2tNYW5hZ2VyJywgSlNPTi5zdHJpbmdpZnkodGhpcy50YXNrcykpXG4gICAgfVxuICAgIGxvYWRUYXNrcygpe1xuICAgICAgICBjb25zdCB0YXNrcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrTWFuYWdlcicpO1xuICAgICAgICByZXR1cm4gdGFza3MgPyBKU09OLnBhcnNlKHRhc2tzKSA6IG51bGw7ICAgXG4gICAgfSovXG5cblxuICAvKiAgZGlzcGxheVRhc2soKXtcbiAgICBjb25zdCB0YXNrc0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza3MtbGlzdCcpXG4gICAgdGFza3NMaXN0LmlubmVySFRNTCA9IFwiIFwiXG5cbiAgICBjb25zdCBwcm9qZWN0U2lkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrcy1saXN0LXNpZGUnKVxuICAgIHByb2plY3RTaWRlLmlubmVySFRNTCA9IFwiIFwiXG5cbiAgICB0aGlzLnByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiB7XG4gICAgICAgIGNvbnN0IHByb2plY3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICBwcm9qZWN0RGl2LmNsYXNzTmFtZSA9ICdwcm9qZWN0J1xuICAgICAgICBwcm9qZWN0RGl2LmlubmVySFRNTCA9IGA8aDM+JHtwcm9qZWN0Lm5hbWV9PC9oMz5gXG4gICAgICAgIHByb2plY3REaXYuY2xhc3NMaXN0LmFkZCgncHJvamVjdEl0ZW0nKSBcbiAgICAgICAgcHJvamVjdERpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG5cbiAgICAgICAgfSlcblxuICAgICAgICBwcm9qZWN0LnRhc2tzLmZvckVhY2godGFzayA9PntcbiAgICAgICAgICAgIGNvbnN0IHRhc2tEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAgICAvLyB0YXNrRGl2LmNsYXNzTmFtZSA9ICd0YXNrJ1xuICAgICAgICAgICAgdGFza0Rpdi5jbGFzc0xpc3QuYWRkKCd0YXNrSXRlbScpXG4gICAgICAgICAgICBjb25zdCB0aXRsZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKVxuICAgICAgICAgICAgdGl0bGVTcGFuLnRleHRDb250ZW50ID0gYCR7dGFzay50aXRsZX1gO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb25TcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIilcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uU3Bhbi50ZXh0Q29udGVudCA9IGAke3Rhc2suZGVzY3JpcHRpb259YFxuICAgIFxuICAgICAgICAgICAgY29uc3QgZHVlRGF0ZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKVxuICAgICAgICAgICAgZHVlRGF0ZVNwYW4udGV4dENvbnRlbnQgPSBgRGF0ZSA6ICR7dGFzay5kdWVEYXRlfWBcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5U3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpXG4gICAgICAgICAgICBwcmlvcml0eVNwYW4udGV4dENvbnRlbnQgPSBgUHJpb3JpdHkgOiAke3Rhc2sucHJpb3JpdHl9YFxuICAgIFxuICAgICAgICAgICAgY29uc3Qgc3dpdGNoVGFza0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcbiAgICAgICAgICAgIHN3aXRjaFRhc2tCdXR0b24uY2xhc3NMaXN0LmFkZChcInN3aXRjaEJ1dHRvblwiKVxuXG4gICAgICAgICAgICBzd2l0Y2hUYXNrQnV0dG9uLnRleHRDb250ZW50ID0gYCR7dGFzay5jb21wbGV0ZWQgPyAnY29tcGxldGVkJyA6ICdub3QgY29tcGxldGVkJ31gXG4gICAgICAgICAgICBzd2l0Y2hUYXNrQnV0dG9uLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgIHN3aXRjaFRhc2tCdXR0b24uc3R5bGUubWFyZ2luTGVmdCA9ICcxMHB4JztcbiAgICAgICAgICAgIHN3aXRjaFRhc2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKGluZGV4LCBwcm9qZWN0TmFtZSwgY29tcGxldGVkKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tNYW5hZ2VyID0gbmV3IFRhc2tNYW5hZ2VyKClcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGFza01hbmFnZXIuZ2V0UHJvamVjdEJ5TmFtZShwcm9qZWN0TmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKHByb2plY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFzayA9IHByb2plY3QuZ2V0VGFza0J5SWQoaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5jb21wbGV0ZWQgPSBjb21wbGV0ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrTWFuYWdlci5kaXNwbGF5VGFzaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pXG4gICAgXG4gICAgICAgICAgICBjb25zdCBkZWxldGVUYXNrQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKVxuICAgICAgICAgICAgZGVsZXRlVGFza0J1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZGVsZXRlQnV0dG9uXCIpXG4gICAgICAgICAgICBkZWxldGVUYXNrQnV0dG9uLnRleHRDb250ZW50ID0gJ+KdjiAnXG4gICAgICAgICAgICBkZWxldGVUYXNrQnV0dG9uLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgICAgIGRlbGV0ZVRhc2tCdXR0b24uc3R5bGUubWFyZ2luTGVmdCA9ICcxMHB4J1xuICAgICAgICAgICAgZGVsZXRlVGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChpbmRleCkgPT4ge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxldGVUYXNrKGluZGV4KTtcbiAgICAgICAgICAgIH0pXG4gICAgXG4gICAgICAgICAgICBjb25zdCBlZGl0VGFza0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcbiAgICAgICAgICAgIGVkaXRUYXNrQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJlZGl0QnV0dG9uXCIpXG4gICAgICAgICAgICBlZGl0VGFza0J1dHRvbi50ZXh0Q29udGVudCA9ICfwn5aK77iPJ1xuICAgICAgICAgICAgZWRpdFRhc2tCdXR0b24uc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICAgICAgZWRpdFRhc2tCdXR0b24uc3R5bGUubWFyZ2luTGVmdCA9ICcxMHB4J1xuICAgICAgICAgICAgZWRpdFRhc2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoaW5kZXgsIHByb2plY3ROYW1lKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tNYW5hZ2VyID0gbmV3IFRhc2tNYW5hZ2VyKClcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0ID0gdGFza01hbmFnZXIuZ2V0UHJvamVjdEJ5TmFtZShwcm9qZWN0TmFtZSlcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrID0gcHJvamVjdC5nZXRUYXNrQnlJZChpbmRleClcbiAgICAgICAgICAgICAgICBpZih0YXNrKXtcbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXRsZScpLnZhbHVlID0gdGFzay50aXRsZTtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpLnZhbHVlID0gdGFzay5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkdWUtZGF0ZScpLnZhbHVlID0gdGFzay5kdWVEYXRlO1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWUgPSB0YXNrLnByaW9yaXR5O1xuICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3QnKS52YWx1ZSA9IHByb2plY3ROYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0YXNrRGl2LmFwcGVuZENoaWxkKHRpdGxlU3BhbilcbiAgICAgICAgICAgIHRhc2tEaXYuYXBwZW5kQ2hpbGQoZGVzY3JpcHRpb25TcGFuKVxuICAgICAgICAgICAgdGFza0Rpdi5hcHBlbmRDaGlsZChkdWVEYXRlU3BhbilcbiAgICAgICAgICAgIHRhc2tEaXYuYXBwZW5kQ2hpbGQocHJpb3JpdHlTcGFuKVxuICAgICAgICAgICAgdGFza0Rpdi5hcHBlbmRDaGlsZChzd2l0Y2hUYXNrQnV0dG9uKVxuICAgICAgICAgICAgdGFza0Rpdi5hcHBlbmRDaGlsZChlZGl0VGFza0J1dHRvbilcbiAgICAgICAgICAgIHRhc2tEaXYuYXBwZW5kQ2hpbGQoZGVsZXRlVGFza0J1dHRvbilcbiAgICAgICAgICAgIHRhc2tzTGlzdC5hcHBlbmRDaGlsZCh0YXNrRGl2KVxuICAgICAgICB9KVxuICAgICAgICBwcm9qZWN0U2lkZS5hcHBlbmRDaGlsZChwcm9qZWN0RGl2KVxuICAgIH0pXG5cbiAgICB0aGlzLnRhc2tzLmZvckVhY2goKHRhc2ssIGluZGV4KT0+e1xuICAgICAgICBjb25zdCB0YXNrSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJylcbiAgICAgICAgdGFza0l0ZW0uY2xhc3NMaXN0LmFkZCgndGFza0l0ZW0nKVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdGl0bGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIilcbiAgICAgICAgdGl0bGVTcGFuLnRleHRDb250ZW50ID0gYCR7dGFzay50aXRsZX1gO1xuXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpXG4gICAgICAgIGRlc2NyaXB0aW9uU3Bhbi50ZXh0Q29udGVudCA9IGAke3Rhc2suZGVzY3JpcHRpb259YFxuXG4gICAgICAgIGNvbnN0IGR1ZURhdGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIilcbiAgICAgICAgZHVlRGF0ZVNwYW4udGV4dENvbnRlbnQgPSBgRGF0ZSA6ICR7dGFzay5kdWVEYXRlfWBcblxuICAgICAgICBjb25zdCBwcmlvcml0eVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKVxuICAgICAgICBwcmlvcml0eVNwYW4udGV4dENvbnRlbnQgPSBgUHJpb3JpdHkgOiAke3Rhc2sucHJpb3JpdHl9YFxuXG4gICAgICAgIGNvbnN0IHN3aXRjaFRhc2tCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpXG4gICAgICAgIHN3aXRjaFRhc2tCdXR0b24uY2xhc3NMaXN0LmFkZChcInN3aXRjaEJ1dHRvblwiKVxuICAgICAgICBzd2l0Y2hUYXNrQnV0dG9uLnRleHRDb250ZW50ID0gYCR7dGFzay5jb21wbGV0ZWQgPyAnY29tcGxldGVkJyA6ICdub3QgY29tcGxldGVkJ31gXG4gICAgICAgIHN3aXRjaFRhc2tCdXR0b24uc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgICAgICBzd2l0Y2hUYXNrQnV0dG9uLnN0eWxlLm1hcmdpbkxlZnQgPSAnMTBweCc7XG4gICAgICAgIHN3aXRjaFRhc2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsKCk9PntcbiAgICAgICAgICB0aGlzLnN3aXRjaFRhc2soaW5kZXgpXG4gICAgICAgICAgXG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgZGVsZXRlVGFza0J1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIilcbiAgICAgICAgZGVsZXRlVGFza0J1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZGVsZXRlQnV0dG9uXCIpXG4gICAgICAgIGRlbGV0ZVRhc2tCdXR0b24udGV4dENvbnRlbnQgPSAn4p2OICdcbiAgICAgICAgZGVsZXRlVGFza0J1dHRvbi5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgIGRlbGV0ZVRhc2tCdXR0b24uc3R5bGUubWFyZ2luTGVmdCA9ICcxMHB4J1xuICAgICAgICBkZWxldGVUYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PntcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlVGFzayhpbmRleCk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgY29uc3QgZWRpdFRhc2tCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpXG4gICAgICAgIGVkaXRUYXNrQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJlZGl0QnV0dG9uXCIpXG4gICAgICAgIGVkaXRUYXNrQnV0dG9uLnRleHRDb250ZW50ID0gJ/CflorvuI8nXG4gICAgICAgIGVkaXRUYXNrQnV0dG9uLnN0eWxlLmN1cnNvciA9ICdwb2ludGVyJztcbiAgICAgICAgZWRpdFRhc2tCdXR0b24uc3R5bGUubWFyZ2luTGVmdCA9ICcxMHB4J1xuICAgICAgICBlZGl0VGFza0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT57XG4gICAgICAgICAgICBjb25zdCBuZXdUaXRsZSA9IHByb21wdCgnbmV3VGl0bGUnLCB0YXNrLnRpdGxlKVxuICAgICAgICAgICAgY29uc3QgbmV3RGVzY3JpcHRpb24gPSBwcm9tcHQoXCJuZXdEZXNjcmlwdGlvblwiLCB0YXNrLmRlc2NyaXB0aW9uKVxuICAgICAgICAgICAgY29uc3QgbmV3RHVlRGF0ZSA9IHByb21wdChcIm5ld0R1ZURhdGVcIiwgdGFzay5kdWVEYXRlKVxuICAgICAgICAgICAgY29uc3QgbmV3UHJpb3JpdHkgPSBwcm9tcHQoXCJuZXdQcmlvcml0eShoaWdoLCBtZWRpdW0sIGxvdylcIiwgdGFzay5wcmlvcml0eSlcbiAgICAgICAgICAgIHRoaXMuZWRpdFRhc2soaW5kZXgsIG5ld1RpdGxlLCBuZXdEZXNjcmlwdGlvbiwgbmV3RHVlRGF0ZSwgbmV3UHJpb3JpdHkpXG5cbiAgICAgICAgfSlcblxuICAgICAgICBcbiAgICAgICAgdGFza0l0ZW0uYXBwZW5kQ2hpbGQodGl0bGVTcGFuKVxuICAgICAgICB0YXNrSXRlbS5hcHBlbmRDaGlsZChkZXNjcmlwdGlvblNwYW4pXG4gICAgICAgIHRhc2tJdGVtLmFwcGVuZENoaWxkKGR1ZURhdGVTcGFuKVxuICAgICAgICB0YXNrSXRlbS5hcHBlbmRDaGlsZChwcmlvcml0eVNwYW4pXG4gICAgICAgIHRhc2tJdGVtLmFwcGVuZENoaWxkKHN3aXRjaFRhc2tCdXR0b24pXG4gICAgICAgIHRhc2tJdGVtLmFwcGVuZENoaWxkKGVkaXRUYXNrQnV0dG9uKVxuICAgICAgICB0YXNrSXRlbS5hcHBlbmRDaGlsZChkZWxldGVUYXNrQnV0dG9uKVxuICAgICAgICB0YXNrc0xpc3QuYXBwZW5kQ2hpbGQodGFza0l0ZW0pXG5cbiAgICAgICAgXG4gICAgICAgIFxuICAgIH0pXG4gICAgXG59XG5mdW5jdGlvbiBvcGVuRWRpdFRhc2tEaWFsb2coaW5kZXgsIHByb2plY3ROYW1lKSB7XG4gICAgY29uc3QgdGFza01hbmFnZXIgPSBuZXcgVGFza01hbmFnZXIoKTtcbiAgICB0YXNrTWFuYWdlci5kaXNwbGF5UHJvamVjdCgpO1xuICAgIGNvbnN0IHByb2plY3QgPSB0YXNrTWFuYWdlci5nZXRQcm9qZWN0QnlOYW1lKHByb2plY3ROYW1lKTtcbiAgICBpZiAocHJvamVjdCkge1xuICAgICAgICBjb25zdCB0YXNrID0gcHJvamVjdC50YXNrcy5maW5kKHRhc2sgPT4gdGFzay5pZCA9PT0gaW5kZXgpO1xuICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgLy9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza0lkSW5wdXQnKS52YWx1ZSA9IHRhc2suaWQ7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGl0bGUnKS52YWx1ZSA9IHRhc2sudGl0bGU7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVzY3JpcHRpb24nKS52YWx1ZSA9IHRhc2suZGVzY3JpcHRpb247XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHVlLWRhdGUnKS52YWx1ZSA9IHRhc2suZHVlRGF0ZTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmlvcml0eScpLnZhbHVlID0gdGFzay5wcmlvcml0eTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0JykudmFsdWUgPSBwcm9qZWN0TmFtZTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWRpYWxvZycpLnNob3dNb2RhbCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGRlbGV0ZVRhc2soaW5kZXgsIHByb2plY3ROYW1lKSB7XG4gICAgY29uc3QgdGFza01hbmFnZXIgPSBuZXcgVGFza01hbmFnZXIoKTtcbiAgICB0YXNrTWFuYWdlci5kZWxldGVUYXNrKGluZGV4LCBwcm9qZWN0TmFtZSk7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZVRhc2tDb21wbGV0aW9uKGluZGV4LCBwcm9qZWN0TmFtZSwgY29tcGxldGVkKSB7XG4gICAgY29uc3QgdGFza01hbmFnZXIgPSBuZXcgVGFza01hbmFnZXIoKTtcbiAgICB0YXNrTWFuYWdlci50b2dnbGVUYXNrQ29tcGxldGlvbihpbmRleCwgcHJvamVjdE5hbWUsIGNvbXBsZXRlZCk7XG59XG5cblxuZnVuY3Rpb24gb3BlbkFkZFRhc2tEaWFsb2cocHJvamVjdE5hbWUpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFzay1kaWFsb2cnKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAvL2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrSWRJbnB1dCcpLnZhbHVlID0gJyc7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWUgPSAnJztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVzY3JpcHRpb24nKS52YWx1ZSA9ICcnO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkdWUtZGF0ZScpLnZhbHVlID0gJyc7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWUgPSAnTWVkaXVtJztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdE5hbWVJbnB1dCcpLnZhbHVlID0gcHJvamVjdE5hbWU7XG59XG5leHBvcnQgZGVmYXVsdCBUYXNrTWFuYWdlclxuXG5leHBvcnQge2RlbGV0ZVRhc2ssIHRvZ2dsZVRhc2tDb21wbGV0aW9uLG9wZW5FZGl0VGFza0RpYWxvZywgb3BlbkFkZFRhc2tEaWFsb2d9XG5cbiovXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgIiwiaW1wb3J0ICcuL3N0eWxlLmNzcydcbi8qXG5pbXBvcnQge2luaXRpYWxMb2FkfSBmcm9tICcuL2xvYWRQYWdlJ1xuaW5pdGlhbExvYWQoKSovXG5pbXBvcnQgVGFza01hbmFnZXIgZnJvbSAnLi90YXNrTWFuYWdlcic7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgdGFza01hbmFnZXIgPSBuZXcgVGFza01hbmFnZXIoKTtcbiAgICB0YXNrTWFuYWdlci5yZW5kZXJQcm9qZWN0cygpO1xuICAgIFxuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lkZWxlZnRiYXInKTtcbiAgICBjb25zdCBzaWRlYmFyQ29udGVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaWRlYmFyLWNvbnRlbnQnKTtcbiAgICBjb25zdCB0b2dnbGVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9nZ2xlLXNpZGViYXInKTtcblxuICAgIHRvZ2dsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgc2lkZWJhci5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJyk7XG4gICAgICAgIHNpZGViYXIuY2xhc3NMaXN0LnRvZ2dsZSgnY2xvc2VkJyk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvcGVuQWRkUHJvamVjdERpYWxvZygpIHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wZW4tZGlhbG9nLXByb2plY3QnKS5zaG93TW9kYWwoKTtcbiAgICB9XG5cbiAgIC8qIGZ1bmN0aW9uIG9wZW5BZGRUYXNrRGlhbG9nKHByb2plY3ROYW1lKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWRpYWxvZycpLnNob3dNb2RhbCgpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza0lkSW5wdXQnKS52YWx1ZSA9ICcnO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGl0bGUnKS52YWx1ZSA9ICcnO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVzY3JpcHRpb24nKS52YWx1ZSA9ICcnO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHVlLWRhdGUnKS52YWx1ZSA9ICcnO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpb3JpdHknKS52YWx1ZSA9ICdtZWRpdW0nO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdCcpLnZhbHVlID0gcHJvamVjdE5hbWU7XG4gICAgfSovXG5cbiAgICAvKmZ1bmN0aW9uIG9wZW5FZGl0VGFza0RpYWxvZyh0YXNrSWQsIHByb2plY3ROYW1lKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSB0YXNrTWFuYWdlci5nZXRQcm9qZWN0QnlOYW1lKHByb2plY3ROYW1lKTtcbiAgICAgICAgaWYgKHByb2plY3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2sgPSBwcm9qZWN0LnRhc2tzLmZpbmQodGFzayA9PiB0YXNrLmlkID09PSB0YXNrSWQpO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza0lkSW5wdXQnKS52YWx1ZSA9IHRhc2suaWQ7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWUgPSB0YXNrLnRpdGxlO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpLnZhbHVlID0gdGFzay5kZXNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHVlLWRhdGUnKS52YWx1ZSA9IHRhc2suZHVlRGF0ZTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpb3JpdHknKS52YWx1ZSA9IHRhc2sucHJpb3JpdHk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3QnKS52YWx1ZSA9IHByb2plY3ROYW1lO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWRpYWxvZycpLnNob3dNb2RhbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSovXG5cbiAgICBmdW5jdGlvbiBkZWxldGVUYXNrKHRhc2tJZCwgcHJvamVjdE5hbWUpIHtcbiAgICAgICAgdGFza01hbmFnZXIuZGVsZXRlVGFzayh0YXNrSWQsIHByb2plY3ROYW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVUYXNrQ29tcGxldGlvbih0YXNrSWQsIHByb2plY3ROYW1lLCBjb21wbGV0ZWQpIHtcbiAgICAgICAgdGFza01hbmFnZXIudG9nZ2xlVGFza0NvbXBsZXRpb24odGFza0lkLCBwcm9qZWN0TmFtZSwgY29tcGxldGVkKTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3Blbi1kaWFsb2ctc2lkZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb3BlbkFkZFByb2plY3REaWFsb2cpO1xuICAgIC8vZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FkZC10YXNrLWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxvcGVuQWRkVGFza0RpYWxvZylcbiAgXG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdC1mb3JtJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3QtbmFtZScpLnZhbHVlLnRyaW0oKTtcbiAgICAgICAgaWYgKHByb2plY3ROYW1lKSB7XG4gICAgICAgICAgICB0YXNrTWFuYWdlci5jcmVhdGVQcm9qZWN0KHByb2plY3ROYW1lKTtcbiAgICAgICAgICAgXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3Blbi1kaWFsb2ctcHJvamVjdCcpLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWZvcm0nKS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgdGFza0lkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tJZElucHV0JykudmFsdWU7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWU7XG4gICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2NyaXB0aW9uJykudmFsdWU7XG4gICAgICAgIGNvbnN0IGR1ZURhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHVlLWRhdGUnKS52YWx1ZTtcbiAgICAgICAgY29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpb3JpdHknKS52YWx1ZTtcbiAgICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdCcpLnZhbHVlO1xuICAgICAgICBjb25zdCBjb21wbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRhc2tJZCkge1xuICAgICAgICAgICAgdGFza01hbmFnZXIuZWRpdFRhc2socGFyc2VJbnQodGFza0lkKSwgdGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgcHJvamVjdE5hbWUsIGNvbXBsZXRlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICB0YXNrTWFuYWdlci5hZGRUYXNrVG9Qcm9qZWN0KHByb2plY3ROYW1lLCB0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2stZGlhbG9nJykuY2xvc2UoKTtcbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb25maXJtLWVkaXQtcHJvamVjdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBvbGRQcm9qZWN0TmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvbGQtcHJvamVjdC1uYW1lJykudmFsdWU7XG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3ROYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ldy1wcm9qZWN0LW5hbWUnKS52YWx1ZTtcbiAgICAgICAgaWYgKG5ld1Byb2plY3ROYW1lKSB7XG4gICAgICAgICAgICB0YXNrTWFuYWdlci5lZGl0UHJvamVjdChvbGRQcm9qZWN0TmFtZSwgbmV3UHJvamVjdE5hbWUpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXQtcHJvamVjdC1kaWFsb2cnKS5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xvc2UtZGlhbG9nJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrLWRpYWxvZycpLmNsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xvc2UtZGlhbG9nLXNpZGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wZW4tZGlhbG9nLXByb2plY3QnKS5jbG9zZSgpO1xuICAgIH0pO1xufSk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsIm4iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicCIsImIiLCJiYXNlVVJJIiwic2VsZiIsImhyZWYiLCJuYyIsImxvY2FscyIsIlByb2plY3QiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0YXNrcyIsImFkZFRhc2siLCJ0YXNrIiwiZGVsZXRlVGFzayIsInRhc2tJZCIsImZpbHRlciIsImVkaXRUYXNrIiwibmV3VGl0bGUiLCJuZXdEZXNjcmlwdGlvbiIsIm5ld0R1ZURhdGUiLCJuZXdQcmlvcml0eSIsImNvbXBsZXRlZCIsImZpbmQiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZHVlRGF0ZSIsInByaW9yaXR5IiwiVGFzayIsIlRhc2tNYW5hZ2VyIiwicHJvamVjdHMiLCJsb2FkUHJvamVjdHMiLCJ0YXNrSWRDb3VudGVyIiwic2VsZWN0ZWRQcm9qZWN0IiwicmVuZGVyUHJvamVjdHMiLCJjcmVhdGVEZWZhdWx0UHJvamVjdCIsInJlbmRlclRhc2tzIiwiZGVmYXVsdFByb2plY3QiLCJjcmVhdGVQcm9qZWN0IiwiYWRkVGFza1RvUHJvamVjdCIsInNhdmVQcm9qZWN0cyIsIm5ld1Byb2plY3QiLCJwcm9qZWN0TmFtZSIsInByb2plY3QiLCJnZXRQcm9qZWN0QnlOYW1lIiwibmV3VGFzayIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwicGFyc2VkRGF0YSIsInBhcnNlIiwicHJvamVjdERhdGEiLCJ0YXNrRGF0YSIsInByb2plY3RMaXN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJmb3JFYWNoIiwicHJvamVjdEl0ZW0iLCJjbGFzc05hbWUiLCJjdXJzb3IiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwic2VsZWN0UHJvamVjdCIsIm9wZW5FZGl0UHJvamVjdERpYWxvZyIsImRlbGV0ZVByb2plY3QiLCJ0YXNrTGlzdCIsInRhc2tJdGVtIiwib3BlbkVkaXRUYXNrRGlhbG9nIiwiZXZlbnQiLCJ0b2dnbGVUYXNrQ29tcGxldGlvbiIsImNoZWNrZWQiLCJjb25zb2xlIiwiZXJyb3IiLCJlZGl0UHJvamVjdCIsIm9sZE5hbWUiLCJuZXdOYW1lIiwiZGlzcGxheSIsInNob3dNb2RhbCIsInZhbHVlIiwib3BlbkFkZFRhc2tEaWFsb2ciLCJ0YXNrTWFuYWdlciIsInNpZGViYXIiLCJ0b2dnbGUiLCJwcmV2ZW50RGVmYXVsdCIsInRyaW0iLCJjbG9zZSIsInBhcnNlSW50Iiwib2xkUHJvamVjdE5hbWUiLCJuZXdQcm9qZWN0TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=