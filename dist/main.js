(()=>{"use strict";var e={208:(e,n,t)=>{t.d(n,{A:()=>m});var o=t(354),r=t.n(o),a=t(314),d=t.n(a),s=t(417),c=t.n(s),i=new URL(t(465),t.b),l=new URL(t(593),t.b),A=d()(r()),u=c()(i),p=c()(l);A.push([e.id,`@font-face {\n  font-family: 'exoregular';\n  src: url(${u}) format('woff2'),\n       url(${p}) format('woff');\n  font-weight: normal;\n  font-style: normal;\n\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n  }\n  * {\n    margin: 0;\n  }\n  body {\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n    font-family: 'exoregular';\n  }\n  img, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n  }\n  input, button, textarea, select {\n    font: inherit;\n  }\n  p, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n  }\n /***********************/ \n\n  .container{\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n    font-size: 20px;\n    \n  }\n  .footer{\n    grid-column: 1/4;\n    background-color: #22c55e;\n    text-align: center;\n    \n  }\n  .main-section{\n    grid-column: 1/4;\n    background-color: #22c55e;\n    text-align: center;\n  }\n  .siderigthbar{\n    padding-left: 25px;\n    padding-top: 25px;\n    grid-column: 2/4;\n    background-color: #f0fdf4;\n  }\n  .buttonSide{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n  }\n  .buttonSideLeftBar{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n    margin-top: 25px;\n  }\n  .buttonAddTask-side,\n  .buttonAddTask{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n  }\n  .sideleftbar{\n    padding-top: 25px;\n    padding-left: 25px;\n    background-color: #e5e5e5;\n    position: relative;\n    transition: width 0.6ms ease;\n  \n  }\n\n  .form{\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 15px;\n  }\n  .input-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #bbf7d0;\n  }\n  .close-form-side,\n  .close-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #ef4444\n  }\n  .seclect-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #bbf7d0;\n  }\n  .tasks-list {\n    list-style-type: none;\n    padding: 0;\n    \n  }\n  .task-item {\n    border: 1px solid #fca5a5;\n    margin: 5px 0;\n    padding: 10px;\n    border-radius: 5px;\n  }\n  dialog[open] {\n  display: block;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-100%, -50%);\n  background-color: white;\n  padding: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  border: none;\n  border-radius: 10px;\n  }\n  dialog {\n  display: none;\n  }\n  .taskItem{\n    gap: 15px;\n    display: flex;\n    margin-bottom: 5px;\n  }\n  .switchButton{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .deleteProjectButton,\n  .deleteButton{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .delete-task-button{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .edit-task-button{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .projectItem:hover{\n    background-color: #7dd3fc;     \n  }\n  .editProject{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .deleteProject{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .item:hover{\n    background-color: #7dd3fc;\n    max-width: 300px;\n   \n  }\n  .Edit{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n \n\n.sidebar-content {\n    /*display: none;\n    flex-direction: column;*/\n}\n\n.sideleftbar.open .sidebar-content {\n    display: flex;\n}\n.sideleftbar.closed .sidebar-content{\n  display: none;\n  flex-direction: column;\n}\n\n.toggle-sidebar {\n    background-color: #3498db;\n    color: white;\n    border: none;\n    padding: 10px;\n    cursor: pointer;\n   /* width: 100%;*/\n}\n\n.toggle-sidebar:hover {\n    background-color: #2980b9;\n}\n.sideleftbar.open {\n  width: 600px;\n}\n\n.sideleftbar.closed {\n  width: 0px;\n  \n}\n\n \n  \n\n\n\n\n\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB;6DACmD;EACnD,mBAAmB;EACnB,kBAAkB;;AAEpB;;AAEA;IACI,sBAAsB;EACxB;EACA;IACE,SAAS;EACX;EACA;IACE,gBAAgB;IAChB,mCAAmC;IACnC,yBAAyB;EAC3B;EACA;IACE,cAAc;IACd,eAAe;EACjB;EACA;IACE,aAAa;EACf;EACA;IACE,yBAAyB;EAC3B;CACD,wBAAwB;;EAEvB;IACE,aAAa;IACb,oCAAoC;IACpC,eAAe;;EAEjB;EACA;IACE,gBAAgB;IAChB,yBAAyB;IACzB,kBAAkB;;EAEpB;EACA;IACE,gBAAgB;IAChB,yBAAyB;IACzB,kBAAkB;EACpB;EACA;IACE,kBAAkB;IAClB,iBAAiB;IACjB,gBAAgB;IAChB,yBAAyB;EAC3B;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;EAC3B;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;IACzB,gBAAgB;EAClB;EACA;;IAEE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;EAC3B;EACA;IACE,iBAAiB;IACjB,kBAAkB;IAClB,yBAAyB;IACzB,kBAAkB;IAClB,4BAA4B;;EAE9B;;EAEA;IACE,aAAa;IACb,qCAAqC;IACrC,SAAS;EACX;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;EAC3B;EACA;;IAEE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB,yBAAyB;EAC3B;EACA;IACE,qBAAqB;IACrB,UAAU;;EAEZ;EACA;IACE,yBAAyB;IACzB,aAAa;IACb,aAAa;IACb,kBAAkB;EACpB;EACA;EACA,cAAc;EACd,eAAe;EACf,QAAQ;EACR,SAAS;EACT,iCAAiC;EACjC,uBAAuB;EACvB,aAAa;EACb,yCAAyC;EACzC,YAAY;EACZ,mBAAmB;EACnB;EACA;EACA,aAAa;EACb;EACA;IACE,SAAS;IACT,aAAa;IACb,kBAAkB;EACpB;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;;IAEE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,yBAAyB;EAC3B;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;EACA;IACE,yBAAyB;IACzB,gBAAgB;;EAElB;EACA;IACE,YAAY;IACZ,kBAAkB;IAClB;EACF;;;AAGF;IACI;4BACwB;AAC5B;;AAEA;IACI,aAAa;AACjB;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,eAAe;GAChB,gBAAgB;AACnB;;AAEA;IACI,yBAAyB;AAC7B;AACA;EACE,YAAY;AACd;;AAEA;EACE,UAAU;;AAEZ",sourcesContent:["@font-face {\n  font-family: 'exoregular';\n  src: url('exo-regular-webfont.woff2') format('woff2'),\n       url('exo-regular-webfont.woff') format('woff');\n  font-weight: normal;\n  font-style: normal;\n\n}\n\n*, *::before, *::after {\n    box-sizing: border-box;\n  }\n  * {\n    margin: 0;\n  }\n  body {\n    line-height: 1.5;\n    -webkit-font-smoothing: antialiased;\n    font-family: 'exoregular';\n  }\n  img, picture, video, canvas, svg {\n    display: block;\n    max-width: 100%;\n  }\n  input, button, textarea, select {\n    font: inherit;\n  }\n  p, h1, h2, h3, h4, h5, h6 {\n    overflow-wrap: break-word;\n  }\n /***********************/ \n\n  .container{\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n    font-size: 20px;\n    \n  }\n  .footer{\n    grid-column: 1/4;\n    background-color: #22c55e;\n    text-align: center;\n    \n  }\n  .main-section{\n    grid-column: 1/4;\n    background-color: #22c55e;\n    text-align: center;\n  }\n  .siderigthbar{\n    padding-left: 25px;\n    padding-top: 25px;\n    grid-column: 2/4;\n    background-color: #f0fdf4;\n  }\n  .buttonSide{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n  }\n  .buttonSideLeftBar{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n    margin-top: 25px;\n  }\n  .buttonAddTask-side,\n  .buttonAddTask{\n    border: none;\n    border-radius: 5px;\n    background-color: #22c55e;\n  }\n  .sideleftbar{\n    padding-top: 25px;\n    padding-left: 25px;\n    background-color: #e5e5e5;\n    position: relative;\n    transition: width 0.6ms ease;\n  \n  }\n\n  .form{\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 15px;\n  }\n  .input-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #bbf7d0;\n  }\n  .close-form-side,\n  .close-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #ef4444\n  }\n  .seclect-form{\n    border: none;\n    border-radius: 5px;\n    background-color: #bbf7d0;\n  }\n  .tasks-list {\n    list-style-type: none;\n    padding: 0;\n    \n  }\n  .task-item {\n    border: 1px solid #fca5a5;\n    margin: 5px 0;\n    padding: 10px;\n    border-radius: 5px;\n  }\n  dialog[open] {\n  display: block;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-100%, -50%);\n  background-color: white;\n  padding: 20px;\n  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  border: none;\n  border-radius: 10px;\n  }\n  dialog {\n  display: none;\n  }\n  .taskItem{\n    gap: 15px;\n    display: flex;\n    margin-bottom: 5px;\n  }\n  .switchButton{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .deleteProjectButton,\n  .deleteButton{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .delete-task-button{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .edit-task-button{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .projectItem:hover{\n    background-color: #7dd3fc;     \n  }\n  .editProject{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n  .deleteProject{\n    border: none;\n    border-radius: 5px;\n    background-color: #dc2626\n  }\n  .item:hover{\n    background-color: #7dd3fc;\n    max-width: 300px;\n   \n  }\n  .Edit{\n    border: none;\n    border-radius: 5px;\n    background-color: #16a34a\n  }\n \n\n.sidebar-content {\n    /*display: none;\n    flex-direction: column;*/\n}\n\n.sideleftbar.open .sidebar-content {\n    display: flex;\n}\n.sideleftbar.closed .sidebar-content{\n  display: none;\n  flex-direction: column;\n}\n\n.toggle-sidebar {\n    background-color: #3498db;\n    color: white;\n    border: none;\n    padding: 10px;\n    cursor: pointer;\n   /* width: 100%;*/\n}\n\n.toggle-sidebar:hover {\n    background-color: #2980b9;\n}\n.sideleftbar.open {\n  width: 600px;\n}\n\n.sideleftbar.closed {\n  width: 0px;\n  \n}\n\n \n  \n\n\n\n\n\n"],sourceRoot:""}]);const m=A},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var d={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(d[c]=!0)}for(var i=0;i<e.length;i++){var l=[].concat(e[i]);o&&d[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},417:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},d=[],s=0;s<e.length;s++){var c=e[s],i=o.base?c[0]+o.base:c[0],l=a[i]||0,A="".concat(i," ").concat(l);a[i]=l+1;var u=t(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=r(p,o);o.byIndex=s,n.splice(s,0,{identifier:A,updater:m,references:1})}d.push(A)}return d}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var d=0;d<a.length;d++){var s=t(a[d]);n[s].references--}for(var c=o(e,r),i=0;i<a.length;i++){var l=t(a[i]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},659:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},593:(e,n,t)=>{e.exports=t.p+"7af4002f083ef6cdccce.woff"},465:(e,n,t)=>{e.exports=t.p+"d2c0ba9e697626c66ab1.woff2"}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(72),n=t.n(e),o=t(825),r=t.n(o),a=t(659),d=t.n(a),s=t(56),c=t.n(s),i=t(540),l=t.n(i),A=t(113),u=t.n(A),p=t(208),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=d().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),n()(p.A,m),p.A&&p.A.locals&&p.A.locals;class g{constructor(e){this.name=e,this.tasks=[]}addTask(e){this.tasks.push(e)}deleteTask(e){this.tasks=this.tasks.filter((n=>n.id!==e))}editTask(e,n,t,o,r,a){const d=this.tasks.find((n=>n.id===e));d&&(d.title=n,d.description=t,d.dueDate=o,d.priority=r,d.completed=a)}}class b{constructor(e,n,t,o,r,a=!1){this.id=e,this.title=n,this.description=t,this.dueDate=o,this.priority=r,this.completed=a}}class f{constructor(){this.projects=[],this.loadProjects(),this.taskIdCounter=1,this.selectedProject=null,this.renderProjects(),0===this.projects.length?this.createDefaultProject():this.selectedProject=this.projects[0].name,this.renderProjects(),this.selectedProject&&this.renderTasks(this.selectedProject)}createDefaultProject(){const e=this.createProject("Default Project");this.addTaskToProject(e.name,"Default Task","This is a default task","2024-06-25","medium"),this.selectedProject=e.name,this.saveProjects()}createProject(e){const n=new g(e);return this.projects.push(n),this.saveProjects(),this.renderProjects(),n}addTaskToProject(e,n,t,o,r){const a=this.getProjectByName(e);if(a){const d=new b(this.taskIdCounter++,n,t,o,r);a.addTask(d),this.renderTasks(e),this.saveProjects()}}getProjectByName(e){return this.projects.find((n=>n.name===e))}saveProjects(){const e={projects:this.projects,taskIdCounter:this.taskIdCounter};localStorage.setItem("taskManager",JSON.stringify(e))}loadProjects(){const e=localStorage.getItem("taskManager");if(e){const n=JSON.parse(e);this.projects=n.projects.map((e=>{const n=new g(e.name);return n.tasks=e.tasks.map((e=>new b(e.id,e.title,e.description,e.dueDate,e.priority,e.completed))),n})),this.taskIdCounter=n.taskIdCounter}else this.createDefaultProject()}renderProjects(){const e=document.getElementById("projects-list");e.innerHTML=" ",this.projects.forEach((n=>{const t=document.createElement("div");t.className="project-item",t.innerHTML=`\n                <span class="project-name">${n.name}</span>\n                <button class="edit-project-button">🖊️</button>\n                <button class="delete-project-button">🗑️</button>\n            `,t.querySelector(".project-name").style.cursor="pointer",t.querySelector(".project-name").classList.add("projectItem"),t.querySelector(".edit-project-button").classList.add("editProject"),t.querySelector(".delete-project-button").classList.add("deleteProject"),t.querySelector(".project-name").addEventListener("click",(()=>this.selectProject(n.name))),t.querySelector(".edit-project-button").addEventListener("click",(()=>this.openEditProjectDialog(n.name))),t.querySelector(".delete-project-button").addEventListener("click",(()=>this.deleteProject(n.name))),e.appendChild(t)}))}renderTasks(e){const n=this.getProjectByName(e),t=document.getElementById("tasks-list");n?(t.innerHTML=` <h3>Tasks for ${n.name}</h3>`,n.tasks.forEach((e=>{const o=document.createElement("div");o.classList.add("item"),o.style.cursor="pointer",o.className="task "+(e.completed?"completed":""),o.innerHTML=`\n           \n                \n                    <input type="checkbox" ${e.completed?"checked":""}>\n                    <h3 class="task-title">Title: ${e.title}</h3>\n                                        \n                    <h4 style = "font-size:20px; color:#0369a1;">Description: ${e.description}</h4>\n                   \n                    <span style = "font-size:20px">Due Date: ${e.dueDate}</span>\n                   \n                    <span style = "font-size:20px; color:#b91c1c">Priority: ${e.priority}</span>\n                    \n                    <button class="edit-task-button">🖊️</button>\n\n                    <button class="delete-task-button">❎</button>\n                   \n            `,t.appendChild(o),o.querySelector(".edit-task-button").addEventListener("click",(()=>this.openEditTaskDialog(e.id,n.name))),o.querySelector(".delete-task-button").addEventListener("click",(()=>this.deleteTask(e.id,n.name))),o.querySelector('input[type="checkbox"]').addEventListener("change",(t=>this.toggleTaskCompletion(e.id,n.name,t.target.checked)))}))):console.error(`Project not found: ${e}`)}toggleTaskCompletion(e,n,t){const o=this.getProjectByName(n);if(o){const r=o.tasks.find((n=>n.id===e));r&&(r.completed=t,this.renderTasks(n),this.saveProjects())}}deleteTask(e,n){const t=this.getProjectByName(n);t&&(t.deleteTask(e),this.renderTasks(n),this.saveProjects())}editTask(e,n,t,o,r,a,d){const s=this.getProjectByName(a);s&&(s.editTask(e,n,t,o,r,d),this.renderTasks(a),this.saveProjects())}deleteProject(e){this.projects=this.projects.filter((n=>n.name!==e)),this.saveProjects(),this.renderProjects(),document.getElementById("tasks-list").innerHTML=""}editProject(e,n){const t=this.getProjectByName(e);t&&(t.name=n,this.saveProjects(),this.renderProjects(),this.selectedProject===e&&(this.selectedProject=n,this.renderTasks(n)))}selectProject(e){this.selectedProject=e,this.saveProjects(),this.renderTasks(e),document.getElementById("add-task-button").style.display="block",document.getElementById("add-task-button").addEventListener("click",(()=>function(e){document.getElementById("task-dialog").showModal(),document.getElementById("taskIdInput").value="",document.getElementById("title").value="",document.getElementById("description").value="",document.getElementById("due-date").value="",document.getElementById("priority").value="medium",document.getElementById("project").value=e}(e)))}openEditTaskDialog(e,n){const t=this.getProjectByName(n);if(t){const o=t.tasks.find((n=>n.id===e));o&&(document.getElementById("taskIdInput").value=o.id,document.getElementById("title").value=o.title,document.getElementById("description").value=o.description,document.getElementById("due-date").value=o.dueDate,document.getElementById("priority").value=o.priority,document.getElementById("project").value=n,document.getElementById("task-dialog").showModal())}}openEditProjectDialog(e){document.getElementById("edit-project-dialog").showModal(),document.getElementById("old-project-name").value=e,document.getElementById("new-project-name").value=e}}document.addEventListener("DOMContentLoaded",(()=>{const e=new f;e.renderProjects();const n=document.getElementById("sideleftbar");document.getElementById("sidebar-content"),document.getElementById("toggle-sidebar").addEventListener("click",(()=>{n.classList.toggle("open"),n.classList.toggle("closed")})),document.getElementById("open-dialog-side").addEventListener("click",(function(){document.getElementById("open-dialog-project").showModal()})),document.getElementById("project-form").addEventListener("submit",(n=>{n.preventDefault();const t=document.getElementById("project-name").value.trim();t&&(e.createProject(t),document.getElementById("open-dialog-project").close())})),document.getElementById("task-form").addEventListener("submit",(n=>{n.preventDefault();const t=document.getElementById("taskIdInput").value,o=document.getElementById("title").value,r=document.getElementById("description").value,a=document.getElementById("due-date").value,d=document.getElementById("priority").value,s=document.getElementById("project").value;t?e.editTask(parseInt(t),o,r,a,d,s,!1):e.addTaskToProject(s,o,r,a,d),document.getElementById("task-dialog").close()})),document.getElementById("confirm-edit-project").addEventListener("click",(()=>{const n=document.getElementById("old-project-name").value,t=document.getElementById("new-project-name").value;t&&(e.editProject(n,t),document.getElementById("edit-project-dialog").close())})),document.getElementById("close-dialog").addEventListener("click",(()=>{document.getElementById("task-dialog").close()})),document.getElementById("close-dialog-side").addEventListener("click",(()=>{document.getElementById("open-dialog-project").close()}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,